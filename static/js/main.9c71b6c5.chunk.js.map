{"version":3,"sources":["logo.svg","components/CurrentCoinBalance.js","components/CoinOverview.js","components/PortfolioOverview.js","components/PortfolioDetails.js","App.js","reportWebVitals.js","index.js"],"names":["CurrentCoinBalance","props","this","coinToken","coinData","coinsOwned","coinPrice","currentValue","fee","moneyInvested","moneyInvestedWithFees","Component","CoinOverview","getProfit","profit","defaultCoinObject","Tab","styled","button","active","ButtonGroup","div","PortfolioDetails","getTabs","allSuportedCoins","map","coin","state","onClick","updateSelectedToken","setState","selectedCoinData","selectedCoinDataSet","selectedCoinPrice","selectedCoinToken","CSVPasrse","require","CoinGeckoClient","App","postProcessingCheckpointCounter","handleFiles","files","postProcessingCheckpoints","postProcessingDone","reader","FileReader","onload","e","result","columns","trim","err","fileData","fileUploaded","getAllCoinsFromReport","filter","indexOf","readAsText","getCoinDataFromReport","row","Coin","toLowerCase","report","Set","analyzeCoinData","prevTransaction","currentTransaction","newRecord","SIDE","parseFloat","Crypto_Amt","Rate","FIAT","Fee","fetchCoinDataUsingId","cb","index","coins","fetch","allCoinCoinGeckoId","then","coinDataReponse","data","market_data","current_price","inr","allCoinPrice","reduce","allCoinData","updateLatestCoinPricesFromCoinGecko","list","resp","code","suportedResponse","coinResp","symbol","toUpperCase","length","coinSymbol","indexInSuportedCoins","id","toRepeat","fetchLatestDataFromCoinGecko","console","log","selectedCoinName","_defaultCoinObject","Object","assign","handleNewTokenSelection","className","src","logo","height","width","alt","fileTypes","Button","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c71b6c5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\n\r\nclass CurrentCoinBalance extends Component {\r\n  \r\n\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div>\r\n        <header>\r\n            <div>\r\n              <h5>Coins Token</h5>\r\n              <p>{this.props.coinToken}</p>\r\n            </div>\r\n            <div>\r\n              <h5>Coins Owned</h5>\r\n              <p>{this.props.coinData.coinsOwned}</p>\r\n            </div>\r\n            <div>\r\n              <h5>Coin Price</h5>\r\n              <p>{this.props.coinPrice}</p>\r\n            </div>\r\n            \r\n            <div>\r\n              <h5>Current Value</h5>\r\n              <p>{this.props.coinData.currentValue}</p>\r\n            </div>\r\n            <div>\r\n              <h5>Fees Paid</h5>\r\n              <p>{this.props.coinData.fee}</p>\r\n            </div>\r\n            <div>\r\n              <h5>Money Invested (Without fee)</h5>\r\n              <p>{this.props.coinData.moneyInvested}</p>\r\n            </div>\r\n            <div>\r\n              <h5>Money Invested (With fee)</h5>\r\n              <p>{this.props.coinData.moneyInvestedWithFees}</p>\r\n            </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrentCoinBalance;\r\n","import React, { Component } from 'react';\r\n\r\nclass CoinOverview extends Component {\r\n  \r\n\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n  }\r\n\r\n  getProfit = () =>  {\r\n    var profit = this.props.coinData.currentValue/this.props.coinData.moneyInvested\r\n    profit *= 100;\r\n\r\n    // Rounding Off\r\n    profit *= 100;\r\n    profit %= 100;\r\n    profit /= 100;\r\n    return profit;\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div>\r\n        <header>\r\n            <div>\r\n              </div>\r\n            <div>\r\n              <h5>{this.props.coinToken} Tokens</h5>\r\n              <p>Owned {this.props.coinData.coinsOwned}</p>\r\n              <p>Value {this.props.coinData.currentValue}</p>\r\n              <p>Profit {this.getProfit()}</p>\r\n              <p>Invested {this.props.coinData.moneyInvested}</p>\r\n            </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CoinOverview;\r\n","import React, { Component } from 'react';\r\nimport CoinOverview from './CoinOverview';\r\n\r\nclass PortfolioOverview extends Component {\r\n  \r\n\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n  }\r\n\r\n  getIndividualCards = () =>  {\r\n    var allCoinData = this.props.allCoinData\r\n    return allCoinData.map( (coin, id) => {\r\n      return (<CoinOverview\r\n                key= { id}\r\n                coinToken = { this.props.allCoins[id]}\r\n                coinData = { coin }\r\n            />)\r\n    });\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div>\r\n        <h4>Portfolio Overview</h4>\r\n        {\r\n          this.getIndividualCards()\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PortfolioOverview;\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport CurrentCoinBalance from './CurrentCoinBalance';\r\n\r\nconst defaultCoinObject = {\r\n  coinsOwned : 0,\r\n  currentValue : 0,\r\n  fee : 0,\r\n  moneyInvested : 0,\r\n  moneyInvestedWithFees : 0\r\n};\r\n\r\n\r\nconst Tab = styled.button`\r\n  font-size: 20px;\r\n  padding: 10px 60px;\r\n  cursor: pointer;\r\n  opacity: 0.6;\r\n  background: white;\r\n  border: 0;\r\n  outline: 0;\r\n  ${({ active }) =>\r\n    active &&\r\n    `\r\n    border-bottom: 2px solid black;\r\n    opacity: 1;\r\n  `}\r\n`;\r\nconst ButtonGroup = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nclass PortfolioDetails extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      active : \"\",\r\n      selectedCoinData : defaultCoinObject,\r\n      selectedCoinDataSet : [],\r\n      selectedCoinPrice : -1,\r\n    } \r\n  }\r\n  getTabs = () =>  {\r\n    var allSuportedCoins = this.props.allSuportedCoins\r\n    return allSuportedCoins.map( coin => {\r\n      return (<Tab\r\n                key={coin}\r\n                active={this.state.active === coin}\r\n                onClick={() => { \r\n                  if(this.state.active === coin){\r\n                    return;\r\n                  }\r\n                  this.props.updateSelectedToken(coin);\r\n                  this.setState({ active : coin})\r\n                }}\r\n              >\r\n                {coin}\r\n              </Tab>)\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <h4>Coin Details</h4>\r\n        <ButtonGroup>\r\n          {\r\n            this.getTabs()\r\n          }\r\n        </ButtonGroup>\r\n        {\r\n            this.props.selectedCoinToken === null\r\n              ? <div> Select a token </div>\r\n              : (<CurrentCoinBalance\r\n                  coinToken = {this.props.selectedCoinToken}\r\n                  coinPrice = {this.props.selectedCoinPrice}\r\n                  coinData = {this.props.selectedCoinData}\r\n                />)\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PortfolioDetails;\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport ReactFileReader from 'react-file-reader';\r\nimport React, { Component } from 'react';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport CurrentCoinBalance from './components/CurrentCoinBalance';\r\nimport PortfolioOverview from './components/PortfolioOverview';\r\nimport PortfolioDetails from './components/PortfolioDetails';\r\nconst CSVPasrse = require('csv-parse');\r\n\r\nconst CoinGecko = require('coingecko-api');\r\nconst CoinGeckoClient = new CoinGecko();\r\n\r\nconst defaultCoinObject = {\r\n  coinsOwned : 0,\r\n  currentValue : 0,\r\n  fee : 0,\r\n  moneyInvested : 0,\r\n  moneyInvestedWithFees : 0\r\n};\r\n\r\nclass App extends Component {\r\n  postProcessingCheckpointCounter = 0;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fileUploaded: false,\r\n      postProcessingDone : false,\r\n      postProcessingCheckpoints : 0,\r\n      fileData : [],\r\n      allCoinData : [],\r\n      allCoinCoinGeckoId : [],\r\n      allCoinPrice : [],\r\n      allSuportedCoins : [],\r\n      selectedCoinData : defaultCoinObject,\r\n      selectedCoinDataSet : [],\r\n      selectedCoinPrice : -1,\r\n      selectedCoinToken : \"\"\r\n    }\r\n  }\r\n  handleFiles = files => {\r\n\r\n    // Set Checkpoint Size\r\n    this.postProcessingCheckpointCounter = 0;\r\n    var postProcessingCheckpoints = 999999;\r\n    this.setState({ postProcessingCheckpoints , postProcessingDone : true});\r\n\r\n    var reader = new FileReader();\r\n    reader.onload = (e) => {\r\n        // Use reader.result\r\n        CSVPasrse(reader.result, {columns: true, trim: true}, (err,fileData) => {\r\n\r\n          this.setState({ fileUploaded: true, postProcessingCheckpoints : 0});\r\n\r\n          var allSuportedCoins = \r\n                        this.getAllCoinsFromReport(fileData)\r\n                          .filter( coin =>{\r\n                              // return ( -1 != [\"BTC\",\"ETH\",\"DOGE\"].indexOf(coin))\r\n                              return ( -1 != [\"BTC\",\"ETH\"].indexOf(coin))\r\n                          });\r\n          this.setState( { allSuportedCoins , fileData })\r\n          // this.updateLatestCoinPricesFromCoinGecko();\r\n\r\n        }) \r\n    }\r\n    reader.readAsText(files[0]);\r\n  }\r\n\r\n  getCoinDataFromReport = (selectedCoinToken) => {\r\n    return this.state.fileData.filter( row => (row.Coin.toLowerCase() === selectedCoinToken.toLowerCase()));\r\n  }\r\n\r\n  getAllCoinsFromReport = (report) => {\r\n    return [...new Set(report.map((row) => row.Coin))] \r\n  }\r\n\r\n  analyzeCoinData = (prevTransaction,currentTransaction) => {\r\n    var newRecord = prevTransaction;\r\n    if(currentTransaction.SIDE==='BUY'){\r\n      newRecord.coinsOwned += parseFloat(currentTransaction.Crypto_Amt)\r\n      newRecord.moneyInvested -= ((parseFloat(currentTransaction.Crypto_Amt)*100000000) * (parseFloat(currentTransaction.Rate)*100000000))\r\n      newRecord.moneyInvested /= 10000000000000000\r\n      newRecord.moneyInvestedWithFees -= parseFloat(currentTransaction.FIAT)\r\n    }else{\r\n      newRecord.coinsOwned -= parseFloat(currentTransaction.Crypto_Amt)\r\n      newRecord.moneyInvested += ((parseFloat(currentTransaction.Crypto_Amt)*100000000) * (parseFloat(currentTransaction.Rate)*100000000))\r\n      newRecord.moneyInvested /= 10000000000000000\r\n      newRecord.moneyInvestedWithFees += parseFloat(currentTransaction.FIAT)\r\n    }\r\n    \r\n    newRecord.fee += parseFloat(currentTransaction.Fee)\r\n    newRecord.currentValue = (newRecord.coinsOwned * this.state.selectedCoinPrice)\r\n    if(newRecord.currentValue !== 0)\r\n      newRecord.currentValue -= newRecord.fee\r\n\r\n    return newRecord  \r\n  }\r\n  \r\n  postProcessingCheckpoints = 0;\r\n  \r\n  // var coinSymbol = coinResp.symbol.toLowerCase();\r\n\r\n  // Updates coin price at indes in state\r\n  fetchCoinDataUsingId = (cb) => {\r\n    var index = this.postProcessingCheckpointCounter\r\n    CoinGeckoClient\r\n      .coins\r\n      .fetch(this.state.allCoinCoinGeckoId[index], {})\r\n      .then(coinDataReponse => {\r\n          const coinPrice = coinDataReponse.data.market_data.current_price.inr\r\n          var allCoinPrice = this.state.allCoinPrice;\r\n          allCoinPrice[index] = coinPrice\r\n          this.setState({ allCoinPrice })     \r\n\r\n          var coinDataSet = this.getCoinDataFromReport(this.state.allSuportedCoins[index]);\r\n          var coinData = coinDataSet.reduce(this.analyzeCoinData,defaultCoinObject);\r\n          \r\n          var allCoinData = this.state.allCoinData;\r\n          allCoinData[index] = coinData\r\n          this.setState({ allCoinData })\r\n\r\n\r\n          cb();\r\n      });\r\n  }\r\n\r\n  updateLatestCoinPricesFromCoinGecko = () => {\r\n    CoinGeckoClient\r\n        .coins\r\n        .list()\r\n        .then(resp => {\r\n            if(resp.code !== 200){\r\n                return;\r\n            }\r\n            var suportedResponse = resp.data.filter( coinResp => {\r\n              return (-1 != this.state.allSuportedCoins.indexOf(coinResp.symbol.toUpperCase()))\r\n            });\r\n            // Set Checkpoint Size\r\n            this.postProcessingCheckpointCounter = 0;\r\n            var postProcessingCheckpoints = suportedResponse.length;\r\n            this.setState({ postProcessingCheckpoints });\r\n            \r\n            var allCoinCoinGeckoId = this.state.allCoinCoinGeckoId;\r\n            suportedResponse.map( coinResp => {\r\n                var coinSymbol = coinResp.symbol.toLowerCase();\r\n                var indexInSuportedCoins = this.state.allSuportedCoins.indexOf(coinSymbol.toUpperCase())\r\n                allCoinCoinGeckoId[indexInSuportedCoins] = coinResp.id\r\n            })\r\n            this.setState({ allCoinCoinGeckoId });\r\n            var toRepeat = () => {\r\n              if(postProcessingCheckpoints <= this.postProcessingCheckpointCounter\r\n                  && !this.state.postProcessingDone){\r\n                this.setState({ postProcessingDone : true})\r\n                return;\r\n              }\r\n              this.fetchCoinDataUsingId(() => { \r\n                this.postProcessingCheckpointCounter++;\r\n                toRepeat();\r\n              })\r\n            }\r\n            toRepeat();\r\n\r\n\r\n    })\r\n  }\r\n\r\n  fetchLatestDataFromCoinGecko = () => {\r\n    // CoinGeckoClient\r\n    //     .coins\r\n    //     .list()\r\n    //     .then(resp => {\r\n    //         if(resp.code !== 200){\r\n    //             return;\r\n    //         }\r\n    //         resp.data.map( coinResp => {\r\n    //             var coinSymbol = coinResp.symbol.toLowerCase();\r\n    //             if(coinSymbol === this.state.selectedCoinToken.toLowerCase()){\r\n                    \r\n    //                 // Get Data\r\n    //                 console.log(\"Fetching Latest Coin Data\");\r\n    //                 // CoinGeckoClient.coins.fetch(coinResp.id, {})\r\n                    //     .then(coinDataReponse => {\r\n                            console.log(\"Latest Coin Data Fetched\");\r\n                            var selectedCoinName = this.state.selectedCoinToken;\r\n                            const selectedCoinPrice = 1\r\n                            // coinDataReponse.data.market_data.current_price.inr\r\n                            let _defaultCoinObject = Object.assign({},defaultCoinObject)\r\n                            var selectedCoinDataSet = this.getCoinDataFromReport(selectedCoinName);\r\n                            var selectedCoinData = selectedCoinDataSet.reduce(this.analyzeCoinData,_defaultCoinObject);\r\n                            \r\n                            this.setState({ selectedCoinPrice })\r\n                            this.setState({selectedCoinDataSet })\r\n                            this.setState({ selectedCoinData })\r\n                        // });\r\n                    // console.log(\"Fetching Historic Prices\");\r\n                    // CoinGeckoClient.coins.fetchMarketChart(coinResp.id, {days : 91, vs_currency : 'inr' , interval : 'daily '})\r\n                    //   .then(coinMarketChartData => {\r\n                    //       console.log(\"Historic Prices Fetched\");\r\n                    //       const historicPrices = coinMarketChartData\r\n                    //                                   .data\r\n                    //                                   .prices\r\n                    //                                   .filter((x,i)=> i > 61) // save last 5 entry as interval field is not supported yet\r\n                    //                                   .map(x => { return Math.round(x[1]*10)/10}); // get abs value of price, 2nd param, 1st is timestamp\r\n                          \r\n                    //   });\r\n    //         }\r\n    //     })\r\n    // })\r\n  }\r\n\r\n  // UI EVENTS\r\n\r\n  handleNewTokenSelection = (selectedCoinToken) => {\r\n    this.setState( { selectedCoinToken })\r\n    this.fetchLatestDataFromCoinGecko();\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        \r\n          {\r\n            !this.state.postProcessingDone\r\n              ? <header className=\"App-header\"> \r\n                  <img src={logo} height=\"100px\" width=\"100px\" className=\"App-logo\" alt=\"logo\" />\r\n                  <label>Upload Report</label>\r\n                  <ReactFileReader handleFiles={this.handleFiles} fileTypes={'.csv'}>\r\n                      <Button color=\"primary\">Upload</Button>\r\n                  </ReactFileReader>\r\n                </header> \r\n              : \r\n              <div>\r\n                {/* <PortfolioOverview\r\n                  allCoinData = {this.state.allCoinData}\r\n                  allCoins = {this.state.allSuportedCoins}\r\n                /> */}\r\n                <PortfolioDetails\r\n                  selectedCoinToken = { this.state.selectedCoinToken }\r\n                  selectedCoinPrice = { this.state.selectedCoinPrice}\r\n                  selectedCoinData = { this.state.selectedCoinData}\r\n                  updateSelectedToken = {this.handleNewTokenSelection}\r\n                  allSuportedCoins = {this.state.allSuportedCoins} />\r\n              </div>\r\n          }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}