{"version":3,"sources":["logo.svg","components/CoinOverview.js","components/PortfolioOverview.js","components/CurrentCoinBalance.js","components/PortfolioDetails.js","App.js","reportWebVitals.js","index.js"],"names":["CoinOverview","getProfit","profit","props","coinData","currentValue","moneyInvested","Math","round","Card","sx","minWidth","CardContent","Typography","gutterBottom","variant","component","this","coinToken","abs","Component","PortfolioOverview","getIndividualCards","allCoinData","map","coin","id","Grid","item","xs","allCoins","container","spacing","chartConfig","chart","height","type","zoom","enabled","dataLabels","stroke","curve","title","text","align","grid","row","colors","opacity","xaxis","categories","CurrentCoinBalance","getGraph","coinHistoricPrice","options","Object","assign","x","Date","toLocaleDateString","series","name","data","coinsOwned","color","coinPrice","fee","moneyInvestedWithFees","defaultCoinObject","PortfolioDetails","handleCoinSelection","e","coinIndex","allSuportedCoins","state","active","setState","firstSelect","updateSelectedToken","getTabs","Tab","label","selectedCoinData","selectedCoinDataSet","selectedCoinPrice","Box","borderBottom","borderColor","Tabs","value","onChange","selectedCoinToken","selectedCoinHistoricPrice","CSVPasrse","require","CoinGeckoClient","clientEndAllowedCoins","emptyState","fileUploaded","showLoader","postProcessingDone","postProcessingCheckpoints","fileData","allCoinCoinGeckoId","allCoinPrice","App","postProcessingCheckpointCounter","handleFiles","files","reader","FileReader","onload","result","columns","trim","err","coinDataAnalyzer","getCoinDataAnalyzer","getAllCoinsFromReport","filter","coinName","getCoinDataFromReport","reduce","indexOf","updateLatestCoinPricesFromCoinGecko","readAsText","Coin","toLowerCase","report","Set","prevTransaction","currentTransaction","newRecord","SIDE","parseFloat","Crypto_Amt","Rate","FIAT","Fee","fetchCoinDataUsingId","cb","index","coins","fetch","then","coinDataReponse","market_data","current_price","inr","coinDataSet","defaultResp","catch","console","log","list","resp","code","suportedResponse","coinResp","symbol","toUpperCase","length","forEach","coinSymbol","indexInSuportedCoins","toRepeat","fetchSelectedCoinIdFromCoinGecko","fetchCoinPrice","fetchHistoricPrices","coinId","updateSelectedCoinInState","fetchMarketChart","days","vs_currency","interval","coinMarketChartData","prices","resetAll","selectedCoinName","handleNewTokenSelection","className","AppBar","position","Toolbar","IconButton","size","edge","mr","flexGrow","Button","onClick","fileTypes","Backdrop","zIndex","theme","drawer","open","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e114ac6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Card, CardContent, Typography } from '@mui/material';\nimport React, { Component } from 'react';\n\nclass CoinOverview extends Component {\n  \n  getProfit = () =>  {\n    var profit = this.props.coinData.currentValue/this.props.coinData.moneyInvested\n    profit *= 100;\n\n    // Rounding Off\n    profit *= 100;\n    profit %= 100;\n    profit = Math.round(profit);\n    profit /= 100;\n    return profit;\n  }\n  \n  render(){\n    return (\n\n      <Card sx={{ minWidth: 275 }}>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            {this.props.coinToken } { this.getProfit() + \"%\" }\n          </Typography>\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            {Math.abs(this.props.coinData.currentValue)} INR\n          </Typography>\n          <p>Invested {Math.abs(this.props.coinData.moneyInvested)}</p>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default CoinOverview;\n","import { Grid} from '@mui/material';\nimport React, { Component } from 'react';\nimport CoinOverview from './CoinOverview';\n\nclass PortfolioOverview extends Component {\n\n  getIndividualCards = () =>  {\n    var allCoinData = this.props.allCoinData\n    return allCoinData.map( (coin, id) => {\n      return (\n        <Grid item xs={4} key= { id}>\n            <CoinOverview\n              coinToken = { this.props.allCoins[id]}\n              coinData = { coin }/>\n        </Grid>)\n    });\n  }\n  \n  render(){\n    return (\n      <div>\n        <h4>Portfolio Overview</h4>\n\n        <Grid container spacing={2}>\n\n        {\n          this.getIndividualCards()\n        }\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default PortfolioOverview;\n","import { Card, CardContent, Typography } from '@mui/material';\nimport React, { Component } from 'react';\nimport ReactApexChart from \"react-apexcharts\";\n\n\nconst chartConfig = {\n  series: [],\n  options: {\n    chart: {\n      height: 350,\n      type: 'line',\n      zoom: {\n        enabled: false\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: 'straight'\n    },\n    title: {\n      text: 'Last 90 price',\n      align: 'left'\n    },\n    grid: {\n      row: {\n        colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n        opacity: 0.5\n      },\n    },\n    xaxis: {\n      categories: [],\n    }\n  },\n};\n\nclass CurrentCoinBalance extends Component {\n  \n  getGraph = () => {\n    const coinHistoricPrice = this.props.coinHistoricPrice || []\n    const options = Object.assign({},chartConfig.options)\n    options.xaxis.categories= coinHistoricPrice.map( x => new Date(x[0]).toLocaleDateString())\n    const series = [{\n      name: this.props.coinToken,\n      data: coinHistoricPrice.map( x => x[1])\n  }]\n    return (\n      <ReactApexChart options={options} series={series} type=\"line\" height={350} />\n    )\n  }\n\n  render(){\n    return (\n      <Card sx={{ minWidth: 275 }}>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            {this.props.coinData.coinsOwned + \" \" + this.props.coinToken + \" Owned\"} \n          </Typography>\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            Price\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {this.props.coinPrice}\n          </Typography>\n\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            Current Value\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {this.props.coinData.currentValue}\n          </Typography>\n\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            Money Invested (Without fee)\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {this.props.coinData.moneyInvested}\n          </Typography>\n\n\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            Fees Paid\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n          {this.props.coinData.fee}\n          </Typography>\n\n\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            Money Invested (With fee)\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {this.props.coinData.moneyInvestedWithFees}\n          </Typography>\n\n          {\n            this.getGraph()\n          }\n\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default CurrentCoinBalance;","import { Tab, Tabs , Box} from '@mui/material';\nimport React, { Component } from 'react';\nimport CurrentCoinBalance from './CurrentCoinBalance';\n\nconst defaultCoinObject = {\n  coinsOwned : 0,\n  currentValue : 0,\n  fee : 0,\n  moneyInvested : 0,\n  moneyInvestedWithFees : 0\n};\n\nclass PortfolioDetails extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstSelect : false,\n      active : \"\",\n      coinIndex : 0,\n      selectedCoinData : defaultCoinObject,\n      selectedCoinDataSet : [],\n      selectedCoinPrice : -1,\n    } \n  }\n\n  handleCoinSelection = (e,coinIndex) => {\n\n    var coin = this.props.allSuportedCoins[coinIndex] || \"\";\n\n    if(this.state.active === coin){\n      return;\n    }\n\n    this.setState({ firstSelect : true , active : coin, coinIndex})\n    this.props.updateSelectedToken(coin);\n    \n  }\n\n  getTabs = () =>  {\n    var allSuportedCoins = this.props.allSuportedCoins\n    return allSuportedCoins.map( coin => {\n      return (<Tab label={coin} key={coin}/>)\n    });\n  }\n\n  render(){\n    return (\n      <div>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={this.state.coinIndex} aria-label=\"suported eth coin\"  onChange={this.handleCoinSelection}>\n            {\n              this.getTabs()\n            }\n          </Tabs>\n        </Box>\n        {\n            this.props.selectedCoinToken === null\n            || !this.state.firstSelect\n              ? <div> Select a token </div>\n              : (<CurrentCoinBalance\n                  coinToken = {this.props.selectedCoinToken}\n                  coinPrice = {this.props.selectedCoinPrice}\n                  coinData = {this.props.selectedCoinData}\n                  coinHistoricPrice = {this.props.selectedCoinHistoricPrice}\n                />)\n        }\n      </div>\n    );\n  }\n}\n\nexport default PortfolioDetails;\n","import logo from './logo.svg';\nimport './App.css';\nimport ReactFileReader from 'react-file-reader';\nimport React, { Component } from 'react';\nimport PortfolioOverview from './components/PortfolioOverview';\nimport PortfolioDetails from './components/PortfolioDetails';\nimport { AppBar, Backdrop, Button, CircularProgress, IconButton, Toolbar, Typography } from '@mui/material';\n// import MenuIcon from '@mui/icons-material/Menu';\nconst CSVPasrse = require('csv-parse');\n\nconst CoinGecko = require('coingecko-api');\nconst CoinGeckoClient = new CoinGecko();\n\n//use [\"ALL\"] to support all coins\nconst clientEndAllowedCoins = [\"ALL\"];\n\nconst defaultCoinObject = {\n  coinsOwned : 0,\n  currentValue : 0,\n  fee : 0,\n  moneyInvested : 0,\n  moneyInvestedWithFees : 0\n};\n\nconst emptyState = {\n  fileUploaded: false,\n  showLoader : false,\n  postProcessingDone : false,\n  postProcessingCheckpoints : 0,\n  fileData : [],\n  allCoinData : [],\n  allCoinCoinGeckoId : [],\n  allCoinPrice : [],\n  allSuportedCoins : [],\n  selectedCoinData : defaultCoinObject,\n  selectedCoinHistoricPrice : [],\n  selectedCoinDataSet : [],\n  selectedCoinPrice : -1,\n  selectedCoinToken : \"\"\n}\n\nclass App extends Component {\n  postProcessingCheckpointCounter = 0;\n  constructor(props) {\n    super(props);\n    this.state = emptyState\n  }\n  handleFiles = files => {\n\n    // Set Checkpoint Size\n    this.postProcessingCheckpointCounter = 0;\n    var postProcessingCheckpoints = 999999;\n    this.setState({ postProcessingCheckpoints , postProcessingDone : false, showLoader : true});\n\n    var reader = new FileReader();\n    reader.onload = (e) => {\n        // Use reader.result\n        CSVPasrse(reader.result, {columns: true, trim: true}, (err,fileData) => {\n\n          this.setState({ fileUploaded: true, postProcessingCheckpoints : 0, fileData});\n          \n          var coinDataAnalyzer = this.getCoinDataAnalyzer(0);\n          var allSuportedCoins = this.getAllCoinsFromReport(fileData)\n                          .filter( coinName => \n                            (this\n                              .getCoinDataFromReport(coinName)\n                              .reduce(coinDataAnalyzer,Object.assign({},defaultCoinObject))\n                              .coinsOwned > 0)\n                          ).filter( coin =>{\n                              return ( -1 !== clientEndAllowedCoins.indexOf(\"ALL\") || -1 !== clientEndAllowedCoins.indexOf(coin) )\n                              // return ( -1 !== [\"BTC\",\"ETH\"].indexOf(coin))\n                          })\n                          // Coins with Balane > 0\n                          \n          \n                  \n\n          \n          this.setState( { allSuportedCoins })\n          this.updateLatestCoinPricesFromCoinGecko();\n\n        }) \n    }\n    reader.readAsText(files[0]);\n  }\n\n  getCoinDataFromReport = (selectedCoinToken) => {\n    return this.state.fileData.filter( row => (row.Coin.toLowerCase() === selectedCoinToken.toLowerCase()));\n  }\n\n  getAllCoinsFromReport = (report) => {\n    return [...new Set(report.map((row) => row.Coin))] \n  }\n\n  getCoinDataAnalyzer = (coinPrice) => {\n      return (prevTransaction,currentTransaction) => {\n        var newRecord = Object.assign({},prevTransaction);\n        \n        if(currentTransaction.SIDE==='BUY'){\n          newRecord.coinsOwned += parseFloat(currentTransaction.Crypto_Amt)\n          newRecord.moneyInvested -= ((parseFloat(currentTransaction.Crypto_Amt)) * (parseFloat(currentTransaction.Rate)))\n          newRecord.moneyInvestedWithFees -= parseFloat(currentTransaction.FIAT)\n        }else{\n          newRecord.coinsOwned -= parseFloat(currentTransaction.Crypto_Amt)\n          newRecord.moneyInvested += ((parseFloat(currentTransaction.Crypto_Amt)) * (parseFloat(currentTransaction.Rate)))\n          newRecord.moneyInvestedWithFees += parseFloat(currentTransaction.FIAT)\n        }\n        \n        newRecord.fee += parseFloat(currentTransaction.Fee)\n        newRecord.currentValue = (newRecord.coinsOwned * coinPrice)\n\n        if(newRecord.currentValue !== 0)\n          newRecord.currentValue -= newRecord.fee\n    \n        return newRecord  \n      }\n  }\n  \n  postProcessingCheckpoints = 0;\n  \n  // var coinSymbol = coinResp.symbol.toLowerCase();\n\n  // Updates coin price at indes in state\n  fetchCoinDataUsingId = (cb) => {\n    var index = this.postProcessingCheckpointCounter\n    CoinGeckoClient\n      .coins\n      .fetch(this.state.allCoinCoinGeckoId[index], {})\n      .then(coinDataReponse => {\n          const coinPrice = coinDataReponse.data.market_data.current_price.inr\n          var allCoinPrice = this.state.allCoinPrice;\n          allCoinPrice[index] = coinPrice\n          this.setState({ allCoinPrice })     \n\n          var coinDataSet = this.getCoinDataFromReport(this.state.allSuportedCoins[index]);\n          var defaultResp = Object.assign({},defaultCoinObject);\n          var coinData = coinDataSet.reduce(this.getCoinDataAnalyzer(coinPrice),defaultResp);\n          \n          var allCoinData = this.state.allCoinData;\n          allCoinData[index] = coinData\n          this.setState({ allCoinData })\n\n\n          cb();\n      }).catch(err => {\n        console.log(err)\n        cb();\n      });\n  }\n\n  updateLatestCoinPricesFromCoinGecko = () => {\n    CoinGeckoClient\n        .coins\n        .list()\n        .then(resp => {\n            if(resp.code !== 200){\n                return;\n            }\n            var suportedResponse = resp.data.filter( coinResp => {\n              return (-1 !== this.state.allSuportedCoins.indexOf(coinResp.symbol.toUpperCase()))\n            });\n            // Set Checkpoint Size\n            this.postProcessingCheckpointCounter = 0;\n            var postProcessingCheckpoints = suportedResponse.length;\n            this.setState({ postProcessingCheckpoints });\n            \n            var allCoinCoinGeckoId = this.state.allCoinCoinGeckoId;\n            suportedResponse.forEach( coinResp => {\n                var coinSymbol = coinResp.symbol.toLowerCase();\n                var indexInSuportedCoins = this.state.allSuportedCoins.indexOf(coinSymbol.toUpperCase())\n                allCoinCoinGeckoId[indexInSuportedCoins] = coinResp.id\n            })\n            this.setState({ allCoinCoinGeckoId });\n            var toRepeat = () => {\n              if(postProcessingCheckpoints <= this.postProcessingCheckpointCounter\n                  && !this.state.postProcessingDone){\n                this.setState({ postProcessingDone : true, showLoader : false})\n                return;\n              }\n              this.fetchCoinDataUsingId(() => { \n                this.postProcessingCheckpointCounter++;\n                toRepeat();\n              })\n            }\n            toRepeat();\n\n\n    })\n  }\n\n  fetchSelectedCoinIdFromCoinGecko = () => {\n    CoinGeckoClient\n        .coins\n        .list()\n        .then(resp => {\n            if(resp.code !== 200){\n                return;\n            }\n            resp.data.forEach( coinResp => {\n                var coinSymbol = coinResp.symbol.toLowerCase();\n                if(coinSymbol === this.state.selectedCoinToken.toLowerCase()){\n                    \n                    // Get Data\n                    this.fetchCoinPrice(coinResp.id)\n                    this.fetchHistoricPrices(coinResp.id)\n            }\n        })\n    }).catch(err => console.log(err));\n  }\n\n  fetchCoinPrice = (coinId) => {\n    CoinGeckoClient\n      .coins\n      .fetch(coinId, {})\n      .then(coinDataReponse => {\n          // const selectedCoinPrice = 1\n          const selectedCoinPrice = coinDataReponse.data.market_data.current_price.inr\n          this.updateSelectedCoinInState(selectedCoinPrice);\n      }).catch(err => console.log(err));\n  }\n\n  fetchHistoricPrices = (coinId) => {\n    CoinGeckoClient\n      .coins\n      .fetchMarketChart(coinId, {days : 91, vs_currency : 'inr' , interval : 'daily '})\n      .then(coinMarketChartData => {\n          const selectedCoinHistoricPrice = coinMarketChartData\n                                              .data\n                                              .prices\n        this.setState( { selectedCoinHistoricPrice });\n      }).catch(err => console.log(err));\n  }\n\n  // UI EVENTS\n\n  resetAll = () => {\n    this.setState(emptyState)\n  }\n\n  updateSelectedCoinInState = (selectedCoinPrice) => {\n    var selectedCoinName = this.state.selectedCoinToken;\n    var selectedCoinDataSet = this.getCoinDataFromReport(selectedCoinName);\n    var defaultResp = Object.assign({},defaultCoinObject);\n    var selectedCoinData = selectedCoinDataSet.reduce(this.getCoinDataAnalyzer(selectedCoinPrice),defaultResp);\n    \n    this.setState({selectedCoinPrice , selectedCoinDataSet , selectedCoinData })\n\n  }\n\n  handleNewTokenSelection = (selectedCoinToken) => {\n    this.setState( { selectedCoinToken })\n    this.fetchSelectedCoinIdFromCoinGecko();\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n           <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton\n                size=\"large\"\n                edge=\"start\"\n                color=\"inherit\"\n                aria-label=\"menu\"\n                sx={{ mr: 2 }}\n              >\n                {/* <MenuIcon /> */}\n              </IconButton>\n              <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                { this.state.postProcessingDone ? \"Detail\" : \"Upload your file\"}\n              </Typography>\n                { this.state.postProcessingDone ? \n                    <Button onClick={this.resetAll} color=\"inherit\">Reset</Button>\n                    : <ReactFileReader handleFiles={this.handleFiles} fileTypes={'.csv'}>\n                          <Button color=\"inherit\" >Upload</Button>\n                      </ReactFileReader>\n                }\n\n              \n            </Toolbar>\n          </AppBar>\n          {\n            !this.state.postProcessingDone\n              ? <header className=\"App-header\"> \n                  {/* <img src={logo} height=\"100px\" width=\"100px\" className=\"App-logo\" alt=\"logo\" /> */}\n                  <label>In Deapth Analysis of Trade Report</label>\n                </header> \n              : \n              <div>\n                <PortfolioOverview\n                  allCoinData = {this.state.allCoinData}\n                  allCoins = {this.state.allSuportedCoins}\n                />\n                <PortfolioDetails\n                  selectedCoinToken = { this.state.selectedCoinToken }\n                  selectedCoinPrice = { this.state.selectedCoinPrice}\n                  selectedCoinData = { this.state.selectedCoinData}\n                  selectedCoinHistoricPrice = { this.state.selectedCoinHistoricPrice }\n                  updateSelectedToken = {this.handleNewTokenSelection}\n                  allSuportedCoins = {this.state.allSuportedCoins} />\n              </div>\n              \n          }\n          <Backdrop\n            sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n            open={this.state.showLoader}\n          >\n            <CircularProgress color=\"inherit\" />\n          </Backdrop>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}