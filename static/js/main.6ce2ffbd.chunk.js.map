{"version":3,"sources":["logo.svg","components/CurrentCoinBalance.js","components/CoinOverview.js","components/PortfolioOverview.js","components/PortfolioDetails.js","App.js","reportWebVitals.js","index.js"],"names":["CurrentCoinBalance","Card","sx","minWidth","CardContent","Typography","gutterBottom","variant","component","this","props","coinData","coinsOwned","coinToken","color","coinPrice","currentValue","moneyInvested","fee","moneyInvestedWithFees","Component","CoinOverview","getProfit","profit","defaultCoinObject","PortfolioDetails","handleCoinSelection","e","coinIndex","coin","allSuportedCoins","state","active","setState","updateSelectedToken","getTabs","map","Tab","label","selectedCoinData","selectedCoinDataSet","selectedCoinPrice","Box","borderBottom","borderColor","Tabs","value","onChange","selectedCoinToken","CSVPasrse","require","CoinGeckoClient","App","postProcessingCheckpointCounter","handleFiles","files","postProcessingCheckpoints","postProcessingDone","reader","FileReader","onload","result","columns","trim","err","fileData","fileUploaded","getAllCoinsFromReport","filter","indexOf","readAsText","getCoinDataFromReport","row","Coin","toLowerCase","report","Set","analyzeCoinData","prevTransaction","currentTransaction","newRecord","SIDE","parseFloat","Crypto_Amt","Rate","FIAT","Fee","fetchCoinDataUsingId","cb","index","coins","fetch","allCoinCoinGeckoId","then","coinDataReponse","data","market_data","current_price","inr","allCoinPrice","coinDataSet","defaultResp","Object","assign","reduce","allCoinData","updateLatestCoinPricesFromCoinGecko","list","resp","code","suportedResponse","coinResp","symbol","toUpperCase","length","coinSymbol","indexInSuportedCoins","id","toRepeat","fetchLatestDataFromCoinGecko","console","log","selectedCoinName","fetchMarketChart","days","vs_currency","interval","coinMarketChartData","prices","x","i","Math","round","handleNewTokenSelection","className","AppBar","position","Toolbar","IconButton","size","edge","mr","flexGrow","Button","src","logo","height","width","alt","fileTypes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ce2ffbd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Card, CardContent, Typography } from '@mui/material';\nimport React, { Component } from 'react';\n\nclass CurrentCoinBalance extends Component {\n  \n  render(){\n    return (\n      <Card sx={{ minWidth: 275 }}>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            {this.props.coinData.coinsOwned + \" \" + this.props.coinToken + \" Owned\"} \n          </Typography>\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            Price\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {this.props.coinPrice}\n          </Typography>\n\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            Current Value\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {this.props.coinData.currentValue}\n          </Typography>\n\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            Money Invested (Without fee)\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {this.props.coinData.moneyInvested}\n          </Typography>\n\n\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            Fees Paid\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n          {this.props.coinData.fee}\n          </Typography>\n\n\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            Money Invested (With fee)\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {this.props.coinData.moneyInvestedWithFees}\n          </Typography>\n\n\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default CurrentCoinBalance;","import React, { Component } from 'react';\n\nclass CoinOverview extends Component {\n  \n\n  constructor(props) {\n    super(props);\n    \n  }\n\n  getProfit = () =>  {\n    var profit = this.props.coinData.currentValue/this.props.coinData.moneyInvested\n    profit *= 100;\n\n    // Rounding Off\n    profit *= 100;\n    profit %= 100;\n    profit /= 100;\n    return profit;\n  }\n  \n  render(){\n    return (\n      <div>\n        <header>\n            <div>\n              </div>\n            <div>\n              <h5>{this.props.coinToken} Tokens</h5>\n              <p>Owned {this.props.coinData.coinsOwned}</p>\n              <p>Value {this.props.coinData.currentValue}</p>\n              <p>Profit {this.getProfit()}</p>\n              <p>Invested {this.props.coinData.moneyInvested}</p>\n            </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default CoinOverview;\n","import React, { Component } from 'react';\nimport CoinOverview from './CoinOverview';\n\nclass PortfolioOverview extends Component {\n  \n\n  constructor(props) {\n    super(props);\n    \n  }\n\n  getIndividualCards = () =>  {\n    var allCoinData = this.props.allCoinData\n    return allCoinData.map( (coin, id) => {\n      return (<CoinOverview\n                key= { id}\n                coinToken = { this.props.allCoins[id]}\n                coinData = { coin }\n            />)\n    });\n  }\n  \n  render(){\n    return (\n      <div>\n        <h4>Portfolio Overview</h4>\n        {\n          this.getIndividualCards()\n        }\n      </div>\n    );\n  }\n}\n\nexport default PortfolioOverview;\n","import { Tab, Tabs , Box} from '@mui/material';\nimport React, { Component } from 'react';\nimport CurrentCoinBalance from './CurrentCoinBalance';\n\nconst defaultCoinObject = {\n  coinsOwned : 0,\n  currentValue : 0,\n  fee : 0,\n  moneyInvested : 0,\n  moneyInvestedWithFees : 0\n};\n\nclass PortfolioDetails extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      active : \"\",\n      coinIndex : 0,\n      selectedCoinData : defaultCoinObject,\n      selectedCoinDataSet : [],\n      selectedCoinPrice : -1,\n    } \n  }\n\n  handleCoinSelection = (e,coinIndex) => {\n    \n    var coin = this.props.allSuportedCoins[coinIndex] || \"\";\n\n    if(this.state.active === coin){\n      return;\n    }\n    this.setState({ active : coin, coinIndex})\n    this.props.updateSelectedToken(coin);\n    \n  }\n\n  getTabs = () =>  {\n    var allSuportedCoins = this.props.allSuportedCoins\n    return allSuportedCoins.map( coin => {\n      return (<Tab label={coin} key={coin}/>)\n    });\n  }\n\n  render(){\n    return (\n      <div>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={this.state.coinIndex} aria-label=\"suported eth coin\"  onChange={this.handleCoinSelection}>\n            {\n              this.getTabs()\n            }\n          </Tabs>\n        </Box>\n        {\n            this.props.selectedCoinToken === null\n              ? <div> Select a token </div>\n              : (<CurrentCoinBalance\n                  coinToken = {this.props.selectedCoinToken}\n                  coinPrice = {this.props.selectedCoinPrice}\n                  coinData = {this.props.selectedCoinData}\n                />)\n        }\n      </div>\n    );\n  }\n}\n\nexport default PortfolioDetails;\n","import logo from './logo.svg';\nimport './App.css';\nimport ReactFileReader from 'react-file-reader';\nimport React, { Component } from 'react';\nimport CurrentCoinBalance from './components/CurrentCoinBalance';\nimport PortfolioOverview from './components/PortfolioOverview';\nimport PortfolioDetails from './components/PortfolioDetails';\nimport { AppBar, Button, IconButton, Toolbar, Typography } from '@mui/material';\n// import MenuIcon from '@mui/icons-material/Menu';\nconst CSVPasrse = require('csv-parse');\n\nconst CoinGecko = require('coingecko-api');\nconst CoinGeckoClient = new CoinGecko();\n\nconst defaultCoinObject = {\n  coinsOwned : 0,\n  currentValue : 0,\n  fee : 0,\n  moneyInvested : 0,\n  moneyInvestedWithFees : 0\n};\n\nclass App extends Component {\n  postProcessingCheckpointCounter = 0;\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileUploaded: false,\n      postProcessingDone : false,\n      postProcessingCheckpoints : 0,\n      fileData : [],\n      allCoinData : [],\n      allCoinCoinGeckoId : [],\n      allCoinPrice : [],\n      allSuportedCoins : [],\n      selectedCoinData : defaultCoinObject,\n      selectedCoinDataSet : [],\n      selectedCoinPrice : -1,\n      selectedCoinToken : \"\"\n    }\n  }\n  handleFiles = files => {\n\n    // Set Checkpoint Size\n    this.postProcessingCheckpointCounter = 0;\n    var postProcessingCheckpoints = 999999;\n    this.setState({ postProcessingCheckpoints , postProcessingDone : true});\n\n    var reader = new FileReader();\n    reader.onload = (e) => {\n        // Use reader.result\n        CSVPasrse(reader.result, {columns: true, trim: true}, (err,fileData) => {\n\n          this.setState({ fileUploaded: true, postProcessingCheckpoints : 0});\n\n          var allSuportedCoins = \n                        this.getAllCoinsFromReport(fileData)\n                          .filter( coin =>{\n                              // return ( -1 != [\"BTC\",\"ETH\",\"DOGE\"].indexOf(coin))\n                              return ( -1 != [\"BTC\",\"ETH\"].indexOf(coin))\n                          });\n          this.setState( { allSuportedCoins , fileData })\n          // this.updateLatestCoinPricesFromCoinGecko();\n\n        }) \n    }\n    reader.readAsText(files[0]);\n  }\n\n  getCoinDataFromReport = (selectedCoinToken) => {\n    return this.state.fileData.filter( row => (row.Coin.toLowerCase() === selectedCoinToken.toLowerCase()));\n  }\n\n  getAllCoinsFromReport = (report) => {\n    return [...new Set(report.map((row) => row.Coin))] \n  }\n\n  analyzeCoinData = (prevTransaction,currentTransaction) => {\n    var newRecord = prevTransaction;\n    if(currentTransaction.SIDE==='BUY'){\n      newRecord.coinsOwned += parseFloat(currentTransaction.Crypto_Amt)\n      newRecord.moneyInvested -= ((parseFloat(currentTransaction.Crypto_Amt)*100000000) * (parseFloat(currentTransaction.Rate)*100000000))\n      newRecord.moneyInvested /= 10000000000000000\n      newRecord.moneyInvestedWithFees -= parseFloat(currentTransaction.FIAT)\n    }else{\n      newRecord.coinsOwned -= parseFloat(currentTransaction.Crypto_Amt)\n      newRecord.moneyInvested += ((parseFloat(currentTransaction.Crypto_Amt)*100000000) * (parseFloat(currentTransaction.Rate)*100000000))\n      newRecord.moneyInvested /= 10000000000000000\n      newRecord.moneyInvestedWithFees += parseFloat(currentTransaction.FIAT)\n    }\n    \n    newRecord.fee += parseFloat(currentTransaction.Fee)\n    newRecord.currentValue = (newRecord.coinsOwned * this.state.selectedCoinPrice)\n    if(newRecord.currentValue !== 0)\n      newRecord.currentValue -= newRecord.fee\n\n    return newRecord  \n  }\n  \n  postProcessingCheckpoints = 0;\n  \n  // var coinSymbol = coinResp.symbol.toLowerCase();\n\n  // Updates coin price at indes in state\n  fetchCoinDataUsingId = (cb) => {\n    var index = this.postProcessingCheckpointCounter\n    CoinGeckoClient\n      .coins\n      .fetch(this.state.allCoinCoinGeckoId[index], {})\n      .then(coinDataReponse => {\n          const coinPrice = coinDataReponse.data.market_data.current_price.inr\n          var allCoinPrice = this.state.allCoinPrice;\n          allCoinPrice[index] = coinPrice\n          this.setState({ allCoinPrice })     \n\n          var coinDataSet = this.getCoinDataFromReport(this.state.allSuportedCoins[index]);\n          var defaultResp = Object.assign({},defaultCoinObject);\n          var coinData = coinDataSet.reduce(this.analyzeCoinData,defaultResp);\n          \n          var allCoinData = this.state.allCoinData;\n          allCoinData[index] = coinData\n          this.setState({ allCoinData })\n\n\n          cb();\n      });\n  }\n\n  updateLatestCoinPricesFromCoinGecko = () => {\n    CoinGeckoClient\n        .coins\n        .list()\n        .then(resp => {\n            if(resp.code !== 200){\n                return;\n            }\n            var suportedResponse = resp.data.filter( coinResp => {\n              return (-1 != this.state.allSuportedCoins.indexOf(coinResp.symbol.toUpperCase()))\n            });\n            // Set Checkpoint Size\n            this.postProcessingCheckpointCounter = 0;\n            var postProcessingCheckpoints = suportedResponse.length;\n            this.setState({ postProcessingCheckpoints });\n            \n            var allCoinCoinGeckoId = this.state.allCoinCoinGeckoId;\n            suportedResponse.map( coinResp => {\n                var coinSymbol = coinResp.symbol.toLowerCase();\n                var indexInSuportedCoins = this.state.allSuportedCoins.indexOf(coinSymbol.toUpperCase())\n                allCoinCoinGeckoId[indexInSuportedCoins] = coinResp.id\n            })\n            this.setState({ allCoinCoinGeckoId });\n            var toRepeat = () => {\n              if(postProcessingCheckpoints <= this.postProcessingCheckpointCounter\n                  && !this.state.postProcessingDone){\n                this.setState({ postProcessingDone : true})\n                return;\n              }\n              this.fetchCoinDataUsingId(() => { \n                this.postProcessingCheckpointCounter++;\n                toRepeat();\n              })\n            }\n            toRepeat();\n\n\n    })\n  }\n\n  fetchLatestDataFromCoinGecko = () => {\n    CoinGeckoClient\n        .coins\n        .list()\n        .then(resp => {\n            if(resp.code !== 200){\n                return;\n            }\n            resp.data.map( coinResp => {\n                var coinSymbol = coinResp.symbol.toLowerCase();\n                if(coinSymbol === this.state.selectedCoinToken.toLowerCase()){\n                    \n                    // Get Data\n                    console.log(\"Fetching Latest Coin Data\");\n                    CoinGeckoClient.coins.fetch(coinResp.id, {})\n                        .then(coinDataReponse => {\n                            console.log(\"Latest Coin Data Fetched\");\n                            var selectedCoinName = this.state.selectedCoinToken;\n                            // const selectedCoinPrice = 1\n                            const selectedCoinPrice = coinDataReponse.data.market_data.current_price.inr\n                            var selectedCoinDataSet = this.getCoinDataFromReport(selectedCoinName);\n                            var defaultResp = Object.assign({},defaultCoinObject);\n                            var selectedCoinData = selectedCoinDataSet.reduce(this.analyzeCoinData,defaultResp);\n                            this.setState({ selectedCoinPrice })\n                            this.setState({selectedCoinDataSet , selectedCoinData })\n                            console.log(\"selectedCoinName\", selectedCoinName, selectedCoinDataSet);\n                        });\n                    console.log(\"Fetching Historic Prices\");\n                    CoinGeckoClient.coins.fetchMarketChart(coinResp.id, {days : 91, vs_currency : 'inr' , interval : 'daily '})\n                      .then(coinMarketChartData => {\n                          console.log(\"Historic Prices Fetched\");\n                          const historicPrices = coinMarketChartData\n                                                      .data\n                                                      .prices\n                                                      .filter((x,i)=> i > 61) // save last 5 entry as interval field is not supported yet\n                                                      .map(x => { return Math.round(x[1]*10)/10}); // get abs value of price, 2nd param, 1st is timestamp\n                          \n                      });\n            }\n        })\n    })\n  }\n\n  // UI EVENTS\n\n  handleNewTokenSelection = (selectedCoinToken) => {\n    this.setState( { selectedCoinToken })\n    this.fetchLatestDataFromCoinGecko();\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n           <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton\n                size=\"large\"\n                edge=\"start\"\n                color=\"inherit\"\n                aria-label=\"menu\"\n                sx={{ mr: 2 }}\n              >\n                {/* <MenuIcon /> */}\n              </IconButton>\n              <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                { this.state.postProcessingDone ? \"Detail\" : \"Upload your file\"}\n              </Typography>\n              <Button color=\"inherit\">Reset</Button>\n            </Toolbar>\n          </AppBar>\n          {\n            !this.state.postProcessingDone\n              ? <header className=\"App-header\"> \n                  <img src={logo} height=\"100px\" width=\"100px\" className=\"App-logo\" alt=\"logo\" />\n                  <label>Upload Report</label>\n                  <ReactFileReader handleFiles={this.handleFiles} fileTypes={'.csv'}>\n                      <Button variant=\"outlined\">Upload</Button>\n                  </ReactFileReader>\n                </header> \n              : \n              <div>\n                {/* <PortfolioOverview\n                  allCoinData = {this.state.allCoinData}\n                  allCoins = {this.state.allSuportedCoins}\n                /> */}\n                <PortfolioDetails\n                  selectedCoinToken = { this.state.selectedCoinToken }\n                  selectedCoinPrice = { this.state.selectedCoinPrice}\n                  selectedCoinData = { this.state.selectedCoinData}\n                  updateSelectedToken = {this.handleNewTokenSelection}\n                  allSuportedCoins = {this.state.allSuportedCoins} />\n              </div>\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}