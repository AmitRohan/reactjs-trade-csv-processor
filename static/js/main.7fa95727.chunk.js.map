{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["CSVPasrse","require","CoinGeckoClient","bitbnsApi","App","props","handleFiles","files","setState","resultObj","reader","FileReader","onload","e","result","columns","trim","err","jsonObj","fetchLatestDataFromCoinGecko","readAsText","getCoinDataFromReport","key","report","filter","row","Coin","toLowerCase","cryptoTradeProcessor","coinName","inrPrice","fileData","coinData","processedData","processDataList","output","coinBal","Math","abs","value","fee","money","fiat","supportedCoins","coins","list","then","resp","code","data","map","coinResp","symbol","console","log","fetch","id","coinDataReponse","market_data","current_price","inr","fetchMarketChart","days","vs_currency","interval","coinMarketChartData","prices","x","i","round","charOutputs","dataset","reduce","prev","current","curretIndex","_new","SIDE","parseFloat","Crypto_Amt","Rate","FIAT","Fee","handleApiKey","evt","apiKey","target","handleApiSecretKey","apiSecretKey","onFetchDataButtonClick","state","currentCoinBalance","error","updateState","className","src","logo","alt","href","rel","type","this","onChange","onClick","fileTypes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fa95727.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport ReactFileReader from 'react-file-reader';\r\nimport React, { Component } from 'react';\r\nconst CSVPasrse = require('csv-parse');\r\n\r\nconst CoinGecko = require('coingecko-api');\r\nconst CoinGeckoClient = new CoinGecko();\r\n\r\n// BIT BNS\r\nconst bitbnsApi = require('bitbns');\r\n\r\nconst bitbns = new bitbnsApi();\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      resultObj: \"Default Content\",\r\n      apiKey: \"\",\r\n      apiSecretKey  : \"\"\r\n    }\r\n  }\r\n  handleFiles = files => {\r\n    this.setState({ resultObj: \"\"});\r\n    var reader = new FileReader();\r\n    reader.onload = (e) => {\r\n        // Use reader.result\r\n        CSVPasrse(reader.result, {columns: true, trim: true}, (err,jsonObj) => {\r\n          this.fetchLatestDataFromCoinGecko(\"ETH\",jsonObj);\r\n        }) \r\n    }\r\n    reader.readAsText(files[0]);\r\n  }\r\n\r\n  getCoinDataFromReport = (key,report) => {\r\n    return report.filter( row => (row.Coin.toLowerCase() === key.toLowerCase()));\r\n  }\r\n  cryptoTradeProcessor = (coinName,inrPrice,fileData) => {\r\n    var coinData = this.getCoinDataFromReport(coinName,fileData);\r\n    var processedData = this.processDataList(coinData,inrPrice);\r\n\r\n    var output = \"\\n\\n\";\r\n    output += \"\\n======================================================================\"; \r\n    output += \"\\n\\t\" + coinName + \" trade result\"; \r\n    output += \"\\n======================================================================\"; \r\n    output += \"\\n\\nCoins Owned : \" + processedData.coinBal + \" \" + coinName; \r\n    output += \"\\nCurrent Value : \" + Math.abs(processedData.value) + \" INR\";\r\n    output += \"\\n\\nTotal Fees Paid : \" + processedData.fee + \" INR\";\r\n    output += \"\\nMoney Invested (Without fee) : \" + Math.abs(processedData.money) + \" INR\";\r\n    output += \"\\nMoney Invested (With fee) : \" + Math.abs(processedData.fiat) + \" INR\";\r\n    output += \"\\n======================================================================\";        \r\n    this.setState({ resultObj: output});\r\n\r\n  }\r\n  supportedCoins = [\r\n      \"ETH\",\r\n      \"BTC\",\r\n      \"QKC\",\r\n      \"DOGE\",\r\n      \"SHIB\",\r\n      \"SAFEMOON\",\r\n      \"XRP\"\r\n  ];\r\n\r\n  fetchLatestDataFromCoinGecko = (coinName,jsonObj) => {\r\n    CoinGeckoClient\r\n        .coins\r\n        .list()\r\n        .then(resp => {\r\n            if(resp.code !== 200){\r\n                return;\r\n            }\r\n            resp.data.map( coinResp => {\r\n                if(coinResp.symbol === coinName.toLowerCase()){\r\n                    \r\n                    // Get Data\r\n                    console.log(\"Fetching Latest Coin Data\");\r\n                    CoinGeckoClient.coins.fetch(coinResp.id, {})\r\n                        .then(coinDataReponse => {\r\n                            console.log(\"Latest Coin Data Fetched\");\r\n                            const inrPrice = coinDataReponse.data.market_data.current_price.inr\r\n                            \r\n\t\t\t\t\t\t\tconsole.log(\"Fetching Historic Prices\");\r\n\t\t\t\t\t\t\tCoinGeckoClient.coins.fetchMarketChart(coinResp.id, {days : 91, vs_currency : 'inr' , interval : 'daily '})\r\n                                .then(coinMarketChartData => {\r\n                                    console.log(\"Historic Prices Fetched\");\r\n                                    const historicPrices = coinMarketChartData\r\n                                                                .data\r\n                                                                .prices\r\n                                                                .filter((x,i)=> i > 61) // save last 5 entry as interval field is not supported yet\r\n                                                                .map(x => { return Math.round(x[1]*10)/10}); // get abs value of price, 2nd param, 1st is timestamp\r\n                                    \r\n                                    var charOutputs = `\\n ${coinResp.symbol} Day Wise Chart\\t Current Price ${inrPrice} INR`;\r\n                                    charOutputs += \"\\n======================================\"; \r\n                                    charOutputs += \"\\n======================================\"; \r\n                                    console.log(charOutputs)\r\n                                    \r\n\r\n                                    console.log(\"Processing Report\");\r\n                                    this.cryptoTradeProcessor(coinResp.symbol,inrPrice,jsonObj)\r\n\r\n                                });\r\n\r\n                                \r\n                        });\r\n            }\r\n        })\r\n    })\r\n  }\r\n  processDataList = (dataset,inrPrice) => {\r\n    return dataset.reduce((prev,current,curretIndex) => {\r\n        var _new = prev;\r\n        if(current.SIDE==='BUY'){\r\n            _new.coinBal += parseFloat(current.Crypto_Amt)\r\n            _new.money -= ((parseFloat(current.Crypto_Amt)*100000000) * (parseFloat(current.Rate)*100000000))\r\n      _new.money /= 10000000000000000\r\n            _new.fiat -= parseFloat(current.FIAT)\r\n        }else{\r\n            _new.coinBal -= parseFloat(current.Crypto_Amt)\r\n            _new.money += ((parseFloat(current.Crypto_Amt)*100000000) * (parseFloat(current.Rate)*100000000))\r\n      _new.money /= 10000000000000000\r\n            _new.fiat += parseFloat(current.FIAT)\r\n        }\r\n        \r\n        _new.fee += parseFloat(current.Fee)\r\n        _new.value = (_new.coinBal * inrPrice)\r\n        if(_new.value !== 0)\r\n            _new.value -= _new.fee\r\n\r\n        return _new  \r\n    },{\r\n        fee : 0,\r\n        coinBal : 0,\r\n        money : 0,\r\n        fiat : 0,\r\n        value : 0,\r\n    })\r\n  }\r\n\r\n\r\n  // UI EVENTS\r\n\r\n  handleApiKey = (evt) => {\r\n    this.setState({\r\n      apiKey: evt.target.value\r\n    });\r\n  }\r\n\r\n  handleApiSecretKey = (evt) => {\r\n    this.setState({\r\n      apiSecretKey: evt.target.value\r\n    });\r\n  }\r\n\r\n  onFetchDataButtonClick = (evt) => {\r\n    console.log(this.state.apiKey,this.state.apiSecretKey);\r\n\r\n    const bitbns = new bitbnsApi({\r\n      apiKey :  this.state.apiKey,\r\n      apiSecretKey : this.state.apiSecretKey\r\n    });\r\n\r\n    bitbns.currentCoinBalance('EVERYTHING',(error, data) => {\r\n      if(!error){\r\n        console.log('Data ::', data);\r\n        this.updateState({ resultObj : data }) \r\n      } else {\r\n        console.log('Error ::', error);\r\n      }\r\n     })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://www.linkedin.com/in/amit-rohan-250727a3/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Follow on linkedin\r\n          </a>\r\n          <label>Api Key:</label>\r\n          <input type=\"text\" value={this.state.apiKey} onChange={this.handleApiKey}></input>\r\n          <label>Api Secret Key:</label>\r\n          <input type=\"password\" value={this.state.apiSecretKey} onChange={this.handleApiSecretKey}></input>\r\n          <button className='btn' onClick={this.onFetchDataButtonClick}>FEtCH</button>\r\n\r\n          <ReactFileReader handleFiles={this.handleFiles} fileTypes={'.csv'}>\r\n              <button className='btn'>Upload</button>\r\n          </ReactFileReader>\r\n          <div> Result </div>\r\n          <div> { this.state.resultObj }</div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}