{"version":3,"sources":["reportWebVitals.js","logo.svg","components/CoinOverview.js","components/PortfolioOverview.js","components/CurrentCoinBalance.js","components/PortfolioDetails.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CoinOverview","getProfit","profit","props","coinData","currentValue","moneyInvested","Math","round","Card","sx","minWidth","CardContent","Typography","gutterBottom","variant","component","this","coinToken","abs","Component","PortfolioOverview","getIndividualCards","allCoinData","map","coin","id","Grid","item","xs","allCoins","container","spacing","chartConfig","chart","height","type","zoom","enabled","dataLabels","stroke","curve","title","text","align","grid","row","colors","opacity","xaxis","categories","CurrentCoinBalance","getOverViewCard","coinsOwned","color","coinPrice","fee","moneyInvestedWithFees","getGraph","coinHistoricPrice","options","Object","assign","x","Date","toLocaleDateString","series","name","data","getHistoricGraphCard","getTransactionListCard","List","width","maxWidth","bgcolor","coinDataSet","transaction","secondaryComp","Fragment","Time","ListItem","ListItemIcon","SIDE","ListItemText","primary","Crypto_Amt","Desc","FIAT","secondary","defaultCoinObject","PortfolioDetails","handleCoinSelection","e","coinIndex","allSuportedCoins","state","active","setState","firstSelect","updateSelectedToken","getTabs","Tab","label","selectedCoinData","selectedCoinDataSet","selectedCoinPrice","Box","borderBottom","borderColor","Tabs","value","onChange","selectedCoinToken","selectedCoinHistoricPrice","CSVPasrse","require","CoinGeckoClient","whiteListCoins","blackListCoins","LOCAL_DATA","emptyState","fileUploaded","showLoader","postProcessingDone","postProcessingCheckpoints","fileData","allCoinCoinGeckoId","allCoinPrice","App","postProcessingCheckpointCounter","initialProcessingChecks","handleProcessedData","localStorage","setItem","JSON","stringify","coinDataAnalyzer","getCoinDataAnalyzer","getAllCoinsFromReport","filter","coinName","getCoinDataFromReport","reduce","indexOf","updateLatestCoinPricesFromCoinGecko","handleFiles","files","reader","FileReader","onload","result","columns","trim","err","readAsText","Coin","toLowerCase","report","Set","prevTransaction","currentTransaction","newRecord","parseFloat","Rate","Fee","fetchCoinDataUsingId","cb","index","undefined","coins","fetch","coinDataReponse","market_data","current_price","inr","defaultResp","catch","console","log","list","resp","code","suportedResponse","coinResp","symbol","toUpperCase","length","forEach","coinSymbol","indexInSuportedCoins","toRepeat","fetchSelectedCoinIdFromCoinGecko","fetchCoinPrice","fetchHistoricPrices","coinId","updateSelectedCoinInState","fetchMarketChart","days","vs_currency","interval","coinMarketChartData","prices","resetAll","selectedCoinName","handleNewTokenSelection","cachedData","parse","getItem","Array","isArray","setTimeout","className","AppBar","position","Toolbar","IconButton","size","edge","mr","flexGrow","Button","onClick","fileTypes","Backdrop","zIndex","theme","drawer","open","CircularProgress","process","emitWarning","warning","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kJAYeA,IAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,gFCPC,I,mFCGTQ,E,4MAEJC,UAAY,WACV,IAAIC,EAAS,EAAKC,MAAMC,SAASC,aAAa,EAAKF,MAAMC,SAASE,cAQlE,OAPAJ,GAAU,IAGVA,GAAU,IACVA,GAAU,IACVA,EAASK,KAAKC,MAAMN,GACpBA,GAAU,K,4CAIZ,WACE,OAEE,cAACO,EAAA,EAAD,CAAMC,GAAI,CAAEC,SAAU,KAAtB,SACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAhD,UACGC,KAAKd,MAAMe,UADd,IAC4BD,KAAKhB,YAAc,OAE/C,eAACY,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAhD,UACGT,KAAKY,IAAIF,KAAKd,MAAMC,SAASC,cADhC,UAGA,0CAAaE,KAAKY,IAAIF,KAAKd,MAAMC,SAASE,2B,GAzBzBc,aAgCZpB,IC/BTqB,E,4MAEJC,mBAAqB,WAEnB,OADkB,EAAKnB,MAAMoB,YACVC,KAAK,SAACC,EAAMC,GAC7B,OACE,cAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACI,cAAC,EAAD,CACEX,UAAc,EAAKf,MAAM2B,SAASJ,GAClCtB,SAAaqB,KAHMC,O,4CAQ/B,WACE,OACE,gCACE,oDAEA,cAACC,EAAA,EAAD,CAAMI,WAAS,EAACC,QAAS,EAAzB,SAGEf,KAAKK,8B,GAtBiBF,aA8BjBC,I,qHC1BTY,EAEK,CACPC,MAAO,CACLC,OAAQ,IACRC,KAAM,OACNC,KAAM,CACJC,SAAS,IAGbC,WAAY,CACVD,SAAS,GAEXE,OAAQ,CACNC,MAAO,YAETC,MAAO,CACLC,KAAM,gBACNC,MAAO,QAETC,KAAM,CACJC,IAAK,CACHC,OAAQ,CAAC,UAAW,eACpBC,QAAS,KAGbC,MAAO,CACLC,WAAY,KAKZC,E,4MAEJC,gBAAkB,WAChB,OACE,cAAC3C,EAAA,EAAD,CAAMC,GAAI,CAAEC,SAAU,KAAtB,SACA,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAhD,SACG,EAAKb,MAAMC,SAASiD,WAAa,IAAM,EAAKlD,MAAMe,UAAY,WAEjE,cAACL,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAhD,mBAGA,cAACH,EAAA,EAAD,CAAYE,QAAQ,QAAQuC,MAAM,iBAAlC,SACG,EAAKnD,MAAMoD,YAGd,cAAC1C,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAhD,2BAGA,cAACH,EAAA,EAAD,CAAYE,QAAQ,QAAQuC,MAAM,iBAAlC,SACG/C,KAAKY,IAAI,EAAKhB,MAAMC,SAASC,gBAGhC,cAACQ,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAhD,0CAGA,cAACH,EAAA,EAAD,CAAYE,QAAQ,QAAQuC,MAAM,iBAAlC,SACG/C,KAAKY,IAAI,EAAKhB,MAAMC,SAASE,iBAIhC,cAACO,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAhD,uBAGA,cAACH,EAAA,EAAD,CAAYE,QAAQ,QAAQuC,MAAM,iBAAlC,SACC,EAAKnD,MAAMC,SAASoD,MAIrB,cAAC3C,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAhD,uCAGA,cAACH,EAAA,EAAD,CAAYE,QAAQ,QAAQuC,MAAM,iBAAlC,SACG/C,KAAKY,IAAI,EAAKhB,MAAMC,SAASqD,+B,EAOtCC,SAAW,WACT,IAAMC,EAAoB,EAAKxD,MAAMwD,mBAAqB,GACpDC,EAAUC,OAAOC,OAAO,GAAG7B,GACjC2B,EAAQX,MAAMC,WAAYS,EAAkBnC,KAAK,SAAAuC,GAAC,OAAI,IAAIC,KAAKD,EAAE,IAAIE,wBACrE,IAAMC,EAAS,CAAC,CACdC,KAAM,EAAKhE,MAAMe,UACjBkD,KAAMT,EAAkBnC,KAAK,SAAAuC,GAAC,OAAIA,EAAE,QAEtC,OACE,cAAC,IAAD,CAAgBH,QAASA,EAASM,OAAQA,EAAQ9B,KAAK,OAAOD,OAAQ,O,EAI1EkC,qBAAuB,WACrB,OACE,cAAC5D,EAAA,EAAD,CAAMC,GAAI,CAAEC,SAAU,KAAtB,SACE,cAACC,EAAA,EAAD,UAEE,EAAK8C,gB,EAMbY,uBAAyB,WACvB,OAAQ,cAAC7D,EAAA,EAAD,CAAMC,GAAI,CAAEC,SAAU,KAAtB,SACN,cAACC,EAAA,EAAD,UACE,cAAC2D,EAAA,EAAD,CAAM7D,GAAI,CAAE8D,MAAO,OAAQC,SAAU,IAAKC,QAAS,oBAAnD,SAEM,EAAKvE,MAAMwE,YAAYnD,KAAK,SAAAoD,GAE1B,IAAIC,EACD,cAAC,IAAMC,SAAP,UACC,cAACjE,EAAA,EAAD,CACEG,UAAU,OACVD,QAAQ,QACR6B,MAAM,QACNU,MAAM,eAJR,SAMGsB,EAAYG,SAOnB,OACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAEyB,QAArBL,EAAYM,KAAiB,cAAC,IAAD,IAAc,cAAC,IAAD,MAI/C,cAACC,EAAA,EAAD,CACEC,QAAUR,EAAYS,WAAa,IAAMT,EAAYU,KAAO,QAAUV,EAAYW,KAClFC,UAAWX,MATAD,a,4CAoB/B,WACE,OACE,eAACjD,EAAA,EAAD,CAAMI,WAAS,EAACC,QAAS,EAAzB,UACI,cAACL,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACE,eAACF,EAAA,EAAD,CAAMI,WAAS,EAACC,QAAS,EAAzB,UACE,cAACL,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SAEIZ,KAAKmC,oBAGT,cAACzB,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SAEIZ,KAAKoD,8BAKb,cAAC1C,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SAEMZ,KAAKqD,kC,GAxIYlD,aAgJlB+B,ICpLTsC,EAAoB,CACxBpC,WAAa,EACbhD,aAAe,EACfmD,IAAM,EACNlD,cAAgB,EAChBmD,sBAAwB,GAgEXiC,E,kDA3Db,WAAYvF,GAAQ,IAAD,8BACjB,cAAMA,IAWRwF,oBAAsB,SAACC,EAAEC,GAEvB,IAAIpE,EAAO,EAAKtB,MAAM2F,iBAAiBD,IAAc,GAElD,EAAKE,MAAMC,SAAWvE,IAIzB,EAAKwE,SAAS,CAAEC,aAAc,EAAOF,OAASvE,EAAMoE,cACpD,EAAK1F,MAAMgG,oBAAoB1E,KArBd,EAyBnB2E,QAAU,WAER,OADuB,EAAKjG,MAAM2F,iBACVtE,KAAK,SAAAC,GAC3B,OAAQ,cAAC4E,EAAA,EAAD,CAAKC,MAAO7E,GAAWA,OA1BjC,EAAKsE,MAAQ,CACXG,aAAc,EACdF,OAAS,GACTH,UAAY,EACZU,iBAAmBd,EACnBe,oBAAsB,GACtBC,mBAAqB,GARN,E,0CAgCnB,WACE,OACE,gCACE,cAACC,EAAA,EAAD,CAAKhG,GAAI,CAAEiG,aAAc,EAAGC,YAAa,WAAzC,SACE,cAACC,EAAA,EAAD,CAAMC,MAAO7F,KAAK8E,MAAMF,UAAW,aAAW,oBAAqBkB,SAAU9F,KAAK0E,oBAAlF,SAEI1E,KAAKmF,cAK0B,OAAjCnF,KAAKd,MAAM6G,mBACP/F,KAAK8E,MAAMG,YAEV,cAAC,EAAD,CACChF,UAAaD,KAAKd,MAAM6G,kBACxBzD,UAAatC,KAAKd,MAAMsG,kBACxBrG,SAAYa,KAAKd,MAAMoG,iBACvB5B,YAAe1D,KAAKd,MAAMqG,oBAC1B7C,kBAAqB1C,KAAKd,MAAM8G,4BANlC,0D,GA/Ce7F,a,sDCJzB8F,EAAYC,EAAQ,KAGpBC,EAAkB,IADND,EAAQ,MAIpBE,EAAiB,CAAC,OAClBC,EAAiB,CAAC,QAClBC,EAAa,cAEb9B,EAAoB,CACxBpC,WAAa,EACbhD,aAAe,EACfmD,IAAM,EACNlD,cAAgB,EAChBmD,sBAAwB,GAGpB+D,EAAa,CACjBC,cAAc,EACdC,YAAa,EACbC,oBAAqB,EACrBC,0BAA4B,EAC5BC,SAAW,GACXtG,YAAc,GACduG,mBAAqB,GACrBC,aAAe,GACfjC,iBAAmB,GACnBS,iBAAmBd,EACnBwB,0BAA4B,GAC5BT,oBAAsB,GACtBC,mBAAqB,EACrBO,kBAAoB,IAGhBgB,E,kDAEJ,WAAY7H,GAAQ,IAAD,uBACjB,cAAMA,IAFR8H,gCAAkC,EACf,EAgBnBC,wBAA0B,WACxB,EAAKD,gCAAkC,EAEvC,EAAKhC,SAAS,CAAE2B,0BADgB,OACYD,oBAAqB,EAAOD,YAAa,KAnBpE,EAuBnBS,oBAAsB,SAACN,GAErBO,aAAaC,QAAQd,EAAWe,KAAKC,UAAUV,IAE/C,EAAK5B,SAAS,CAAEwB,cAAc,EAAMI,aAEpC,IAAIW,EAAmB,EAAKC,oBAAoB,GAC5C3C,EAAmB,EAAK4C,sBAAsBb,GACjCc,QAAQ,SAAAC,GAAQ,OACd,EACEC,sBAAsBD,GACtBE,OAAON,EAAiB3E,OAAOC,OAAO,GAAG2B,IACzCpC,WAAa,KASlCyC,GALAA,EAAmBA,EAAiB6C,QAAQ,SAAAlH,GAC1C,OAAU,IAAM4F,EAAe0B,QAAQ,SAAW,IAAM1B,EAAe0B,QAAQtH,OAI7CkH,QAAQ,SAAAlH,GAC1C,OAAU,IAAM6F,EAAeyB,QAAQ,SAAW,IAAMzB,EAAeyB,QAAQtH,MAGjF,EAAKwE,SAAU,CAAEH,qBACjB,EAAKkD,uCAjDY,EAoDnBC,YAAc,SAAAC,GAEZ,EAAKhB,0BAEL,IAAIiB,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAACzD,GAEbsB,EAAUiC,EAAOG,OAAQ,CAACC,SAAS,EAAMC,MAAM,IAAO,SAACC,EAAI5B,GACzD,EAAKM,oBAAoBN,OAG/BsB,EAAOO,WAAWR,EAAM,KA/DP,EAkEnBL,sBAAwB,SAAC7B,GACvB,OAAO,EAAKjB,MAAM8B,SAASc,QAAQ,SAAA7F,GAAG,OAAKA,EAAI6G,KAAKC,gBAAkB5C,EAAkB4C,kBAnEvE,EAsEnBlB,sBAAwB,SAACmB,GACvB,OAAO,YAAI,IAAIC,IAAID,EAAOrI,KAAI,SAACsB,GAAD,OAASA,EAAI6G,WAvE1B,EA0EnBlB,oBAAsB,SAAClF,GACnB,OAAO,SAACwG,EAAgBC,GACtB,IAAIC,EAAYpG,OAAOC,OAAO,GAAGiG,GAkBjC,MAhB6B,QAA1BC,EAAmB9E,MACpB+E,EAAU5G,YAAc6G,WAAWF,EAAmB3E,YACtD4E,EAAU3J,eAAmB4J,WAAWF,EAAmB3E,YAAgB6E,WAAWF,EAAmBG,MACzGF,EAAUxG,uBAAyByG,WAAWF,EAAmBzE,QAEjE0E,EAAU5G,YAAc6G,WAAWF,EAAmB3E,YACtD4E,EAAU3J,eAAmB4J,WAAWF,EAAmB3E,YAAgB6E,WAAWF,EAAmBG,MACzGF,EAAUxG,uBAAyByG,WAAWF,EAAmBzE,OAGnE0E,EAAUzG,KAAO0G,WAAWF,EAAmBI,KAC/CH,EAAU5J,aAAgB4J,EAAU5G,WAAaE,EAEnB,IAA3B0G,EAAU5J,eACX4J,EAAU5J,cAAgB4J,EAAUzG,KAE/ByG,IA9FM,EAkGnBrC,0BAA4B,EAlGT,EAuGnByC,qBAAuB,SAACC,GACtB,IAAIC,EAAQ,EAAKtC,qCAE2BuC,IAAzC,EAAKzE,MAAM+B,mBAAmByC,GAKjCnD,EACGqD,MACAC,MAAM,EAAK3E,MAAM+B,mBAAmByC,GAAQ,IAC5C7K,MAAK,SAAAiL,GACF,IAAMpH,EAAYoH,EAAgBvG,KAAKwG,YAAYC,cAAcC,IAC7D/C,EAAe,EAAKhC,MAAMgC,aAC9BA,EAAawC,GAAShH,EACtB,EAAK0C,SAAS,CAAE8B,iBAEhB,IAAIpD,EAAc,EAAKkE,sBAAsB,EAAK9C,MAAMD,iBAAiByE,IACrEQ,EAAclH,OAAOC,OAAO,GAAG2B,GAC/BrF,EAAWuE,EAAYmE,OAAO,EAAKL,oBAAoBlF,GAAWwH,GAElExJ,EAAc,EAAKwE,MAAMxE,YAC7BA,EAAYgJ,GAASnK,EACrB,EAAK6F,SAAS,CAAE1E,gBAGhB+I,OACDU,OAAM,SAAAvB,GACPwB,QAAQC,IAAIzB,GACZa,OAzBFA,KA3Ge,EAwInBtB,oCAAsC,WACpC5B,EACKqD,MACAU,OACAzL,MAAK,SAAA0L,GACF,GAAiB,MAAdA,EAAKC,KAAR,CAGA,IAAIC,EAAmBF,EAAKhH,KAAKuE,QAAQ,SAAA4C,GACvC,OAAS,IAAM,EAAKxF,MAAMD,iBAAiBiD,QAAQwC,EAASC,OAAOC,kBAGrE,EAAKxD,gCAAkC,EACvC,IAAIL,EAA4B0D,EAAiBI,OACjD,EAAKzF,SAAS,CAAE2B,8BAEhB,IAAIE,EAAqB,EAAK/B,MAAM+B,mBACpCwD,EAAiBK,SAAS,SAAAJ,GACtB,IAAIK,EAAaL,EAASC,OAAO5B,cAC7BiC,EAAuB,EAAK9F,MAAMD,iBAAiBiD,QAAQ6C,EAAWH,eAC1E3D,EAAmB+D,GAAwBN,EAAS7J,MAExD,EAAKuE,SAAS,CAAE6B,wBACD,SAAXgE,IACClE,GAA6B,EAAKK,kCAC7B,EAAKlC,MAAM4B,mBACjB,EAAK1B,SAAS,CAAE0B,oBAAqB,EAAMD,YAAa,IAG1D,EAAK2C,sBAAqB,WACxB,EAAKpC,kCACL6D,OAGJA,OAGLd,MAAMC,QAAQC,MA7KA,EAgLnBa,iCAAmC,WACjC3E,EACKqD,MACAU,OACAzL,MAAK,SAAA0L,GACe,MAAdA,EAAKC,MAGRD,EAAKhH,KAAKuH,SAAS,SAAAJ,GACEA,EAASC,OAAO5B,gBACf,EAAK7D,MAAMiB,kBAAkB4C,gBAG3C,EAAKoC,eAAeT,EAAS7J,IAC7B,EAAKuK,oBAAoBV,EAAS7J,WAG/CsJ,MAAMC,QAAQC,MAjMA,EAoMnBc,eAAiB,SAACE,GAChB9E,EACGqD,MACAC,MAAMwB,EAAQ,IACdxM,MAAK,SAAAiL,GAEF,IAAMlE,EAAoBkE,EAAgBvG,KAAKwG,YAAYC,cAAcC,IACzE,EAAKqB,0BAA0B1F,MAChCuE,MAAMC,QAAQC,MA5MF,EA+MnBe,oBAAsB,SAACC,GACrB9E,EACGqD,MACA2B,iBAAiBF,EAAQ,CAACG,KAAO,GAAIC,YAAc,MAAQC,SAAW,WACtE7M,MAAK,SAAA8M,GACF,IAAMvF,EAA4BuF,EACGpI,KACAqI,OACvC,EAAKxG,SAAU,CAAEgB,iCAChB+D,MAAMC,QAAQC,MAxNF,EA6NnBwB,SAAW,WACTtE,aAAaC,QAAQd,EAAW,MAChC,EAAKtB,SAASuB,IA/NG,EAkOnB2E,0BAA4B,SAAC1F,GAC3B,IAAIkG,EAAmB,EAAK5G,MAAMiB,kBAC9BR,EAAsB,EAAKqC,sBAAsB8D,GACjD5B,EAAclH,OAAOC,OAAO,GAAG2B,GAC/Bc,EAAmBC,EAAoBsC,OAAO,EAAKL,oBAAoBhC,GAAmBsE,GAE9F,EAAK9E,SAAS,CAACQ,oBAAoBD,sBAAsBD,sBAxOxC,EA4OnBqG,wBAA0B,SAAC5F,GACzB,EAAKf,SAAU,CAAEe,sBACjB,EAAK+E,oCA5OL,EAAKhG,MAAQyB,EAEb,IAAIqF,EAAavE,KAAKwE,MAAM1E,aAAa2E,QAAQxF,IAJhC,OAKA,MAAdsF,GAAsBG,MAAMC,QAAQJ,KACrC5B,QAAQC,IAAI,qBAAqB2B,GAEjC,EAAK3E,0BACLgF,YAAY,WACV,EAAK/E,oBAAoB0E,KACzB,MAXa,E,0CAiPnB,WACE,OACE,sBAAKM,UAAU,MAAf,UACK,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACC,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLC,KAAK,QACLnK,MAAM,UACN,aAAW,OACX5C,GAAI,CAAEgN,GAAI,KAIZ,cAAC7M,EAAA,EAAD,CAAYE,QAAQ,KAAKC,UAAU,MAAMN,GAAI,CAAEiN,SAAU,GAAzD,SACI1M,KAAK8E,MAAM4B,mBAAqB,SAAW,qBAE3C1G,KAAK8E,MAAM4B,mBACT,cAACiG,EAAA,EAAD,CAAQC,QAAS5M,KAAKyL,SAAUpJ,MAAM,UAAtC,mBACE,cAAC,IAAD,CAAiB2F,YAAahI,KAAKgI,YAAa6E,UAAW,OAA3D,SACI,cAACF,EAAA,EAAD,CAAQtK,MAAM,UAAd,2BAQbrC,KAAK8E,MAAM4B,mBAMV,gCACE,cAAC,EAAD,CACEpG,YAAeN,KAAK8E,MAAMxE,YAC1BO,SAAYb,KAAK8E,MAAMD,mBAEzB,cAAC,EAAD,CACEkB,kBAAsB/F,KAAK8E,MAAMiB,kBACjCP,kBAAsBxF,KAAK8E,MAAMU,kBACjCF,iBAAqBtF,KAAK8E,MAAMQ,iBAChCC,oBAAwBvF,KAAK8E,MAAMS,oBACnCS,0BAA8BhG,KAAK8E,MAAMkB,0BACzCd,oBAAuBlF,KAAK2L,wBAC5B9G,iBAAoB7E,KAAK8E,MAAMD,sBAjBjC,wBAAQqH,UAAU,aAAlB,SAEE,yEAmBR,cAACY,EAAA,EAAD,CACErN,GAAI,CAAE4C,MAAO,OAAQ0K,OAAQ,SAACC,GAAD,OAAWA,EAAMD,OAAOE,OAAS,IAC9DC,KAAMlN,KAAK8E,MAAM2B,WAFnB,SAIE,cAAC0G,EAAA,EAAD,CAAkB9K,MAAM,qB,GAzSlBlC,aAgTH4G,O,iCC3Vf,0FAgBAqG,EAAQC,YATY,SAACC,GAIfA,GACAtD,QAAQC,IAAIqD,IAMlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,MAEFC,SAASC,eAAe,SAM1BrP,e","file":"static/js/main.c3130543.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Card, CardContent, Typography } from '@mui/material';\nimport React, { Component } from 'react';\n\nclass CoinOverview extends Component {\n  \n  getProfit = () =>  {\n    var profit = this.props.coinData.currentValue/this.props.coinData.moneyInvested\n    profit *= 100;\n\n    // Rounding Off\n    profit *= 100;\n    profit %= 100;\n    profit = Math.round(profit);\n    profit /= 100;\n    return profit;\n  }\n  \n  render(){\n    return (\n\n      <Card sx={{ minWidth: 275 }}>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            {this.props.coinToken } { this.getProfit() + \"%\" }\n          </Typography>\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            {Math.abs(this.props.coinData.currentValue)} INR\n          </Typography>\n          <p>Invested {Math.abs(this.props.coinData.moneyInvested)}</p>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default CoinOverview;\n","import { Grid} from '@mui/material';\nimport React, { Component } from 'react';\nimport CoinOverview from './CoinOverview';\n\nclass PortfolioOverview extends Component {\n\n  getIndividualCards = () =>  {\n    var allCoinData = this.props.allCoinData\n    return allCoinData.map( (coin, id) => {\n      return (\n        <Grid item xs={4} key= { id}>\n            <CoinOverview\n              coinToken = { this.props.allCoins[id]}\n              coinData = { coin }/>\n        </Grid>)\n    });\n  }\n  \n  render(){\n    return (\n      <div>\n        <h4>Portfolio Overview</h4>\n\n        <Grid container spacing={2}>\n\n        {\n          this.getIndividualCards()\n        }\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default PortfolioOverview;\n","import { Card, CardContent, Grid, List, ListItem, ListItemIcon, ListItemText, Typography } from '@mui/material';\nimport React, { Component } from 'react';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\n\nimport ReactApexChart from \"react-apexcharts\";\n\n\nconst chartConfig = {\n  series: [],\n  options: {\n    chart: {\n      height: 350,\n      type: 'line',\n      zoom: {\n        enabled: false\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: 'straight'\n    },\n    title: {\n      text: 'Last 90 price',\n      align: 'left'\n    },\n    grid: {\n      row: {\n        colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n        opacity: 0.5\n      },\n    },\n    xaxis: {\n      categories: [],\n    }\n  },\n};\n\nclass CurrentCoinBalance extends Component {\n\n  getOverViewCard = () => {\n    return(\n      <Card sx={{ minWidth: 275 }}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"div\">\n          {this.props.coinData.coinsOwned + \" \" + this.props.coinToken + \" Owned\"} \n        </Typography>\n        <Typography gutterBottom variant=\"h6\" component=\"div\">\n          Price\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {this.props.coinPrice}\n        </Typography>\n\n        <Typography gutterBottom variant=\"h6\" component=\"div\">\n          Current Value\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {Math.abs(this.props.coinData.currentValue)}\n        </Typography>\n\n        <Typography gutterBottom variant=\"h6\" component=\"div\">\n          Money Invested (Without fee)\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {Math.abs(this.props.coinData.moneyInvested)}\n        </Typography>\n\n\n        <Typography gutterBottom variant=\"h6\" component=\"div\">\n          Fees Paid\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n        {this.props.coinData.fee}\n        </Typography>\n\n\n        <Typography gutterBottom variant=\"h6\" component=\"div\">\n          Money Invested (With fee)\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {Math.abs(this.props.coinData.moneyInvestedWithFees)}\n        </Typography>\n      </CardContent>\n    </Card>\n    )\n  }\n  \n  getGraph = () => {\n    const coinHistoricPrice = this.props.coinHistoricPrice || []\n    const options = Object.assign({},chartConfig.options)\n    options.xaxis.categories= coinHistoricPrice.map( x => new Date(x[0]).toLocaleDateString())\n    const series = [{\n      name: this.props.coinToken,\n      data: coinHistoricPrice.map( x => x[1])\n  }]\n    return (\n      <ReactApexChart options={options} series={series} type=\"line\" height={350} />\n    )\n  }\n\n  getHistoricGraphCard = () => {\n    return (\n      <Card sx={{ minWidth: 275 }}>\n        <CardContent>\n        {\n          this.getGraph()\n        }\n        </CardContent>\n      </Card>)\n  }\n\n  getTransactionListCard = () => {\n    return (<Card sx={{ minWidth: 275 }}>\n      <CardContent>\n        <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n            {\n              this.props.coinDataSet.map( transaction => {\n                \n                var secondaryComp = \n                  (<React.Fragment>\n                    <Typography\n                      component=\"span\"\n                      variant=\"body2\"\n                      align=\"right\"\n                      color=\"text.primary\"\n                    >\n                      {transaction.Time}\n                    </Typography>\n                    \n                  </React.Fragment>)\n                \n                \n                \n                return(\n                  <ListItem key={transaction}>\n                    <ListItemIcon>\n                      {\n                        transaction.SIDE === \"BUY\" ? <AddIcon /> : <RemoveIcon />\n                      }\n                      \n                    </ListItemIcon>\n                    <ListItemText\n                      primary={ transaction.Crypto_Amt + \" \" + transaction.Desc + \" for \" + transaction.FIAT}\n                      secondary={secondaryComp}\n                    />\n                  </ListItem>\n                )\n              })\n            }\n          </List>\n      </CardContent>\n    </Card>)\n  }\n\n  render(){\n    return (\n      <Grid container spacing={2}>\n          <Grid item xs={8}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                {\n                  this.getOverViewCard()\n                }\n              </Grid>\n              <Grid item xs={12}>\n                {\n                  this.getHistoricGraphCard()\n                }\n              </Grid>\n            </Grid>\n          </Grid>          \n          <Grid item xs={4}>\n              {\n                this.getTransactionListCard()\n              }\n          </Grid>\n        </Grid>\n    );\n  }\n}\n\nexport default CurrentCoinBalance;","import { Tab, Tabs , Box} from '@mui/material';\nimport React, { Component } from 'react';\nimport CurrentCoinBalance from './CurrentCoinBalance';\n\nconst defaultCoinObject = {\n  coinsOwned : 0,\n  currentValue : 0,\n  fee : 0,\n  moneyInvested : 0,\n  moneyInvestedWithFees : 0\n};\n\nclass PortfolioDetails extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstSelect : false,\n      active : \"\",\n      coinIndex : 0,\n      selectedCoinData : defaultCoinObject,\n      selectedCoinDataSet : [],\n      selectedCoinPrice : -1,\n    } \n  }\n\n  handleCoinSelection = (e,coinIndex) => {\n\n    var coin = this.props.allSuportedCoins[coinIndex] || \"\";\n\n    if(this.state.active === coin){\n      return;\n    }\n\n    this.setState({ firstSelect : true , active : coin, coinIndex})\n    this.props.updateSelectedToken(coin);\n    \n  }\n\n  getTabs = () =>  {\n    var allSuportedCoins = this.props.allSuportedCoins\n    return allSuportedCoins.map( coin => {\n      return (<Tab label={coin} key={coin}/>)\n    });\n  }\n\n  render(){\n    return (\n      <div>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={this.state.coinIndex} aria-label=\"suported eth coin\"  onChange={this.handleCoinSelection}>\n            {\n              this.getTabs()\n            }\n          </Tabs>\n        </Box>\n        {\n            this.props.selectedCoinToken === null\n            || !this.state.firstSelect\n              ? <div> Select a token </div>\n              : (<CurrentCoinBalance\n                  coinToken = {this.props.selectedCoinToken}\n                  coinPrice = {this.props.selectedCoinPrice}\n                  coinData = {this.props.selectedCoinData}\n                  coinDataSet = {this.props.selectedCoinDataSet}\n                  coinHistoricPrice = {this.props.selectedCoinHistoricPrice}\n                />)\n        }\n      </div>\n    );\n  }\n}\n\nexport default PortfolioDetails;\n","import logo from './logo.svg';\nimport './App.css';\nimport ReactFileReader from 'react-file-reader';\nimport React, { Component } from 'react';\nimport PortfolioOverview from './components/PortfolioOverview';\nimport PortfolioDetails from './components/PortfolioDetails';\nimport { AppBar, Backdrop, Button, CircularProgress, IconButton, Toolbar, Typography } from '@mui/material';\n// import MenuIcon from '@mui/icons-material/Menu';\nconst CSVPasrse = require('csv-parse');\n\nconst CoinGecko = require('coingecko-api');\nconst CoinGeckoClient = new CoinGecko();\n\n//use [\"ALL\"] to support all coins\nconst whiteListCoins = [\"ALL\"];\nconst blackListCoins = [\"SOUL\"];\nconst LOCAL_DATA = \"XYZZYSPOON!\"\n\nconst defaultCoinObject = {\n  coinsOwned : 0,\n  currentValue : 0,\n  fee : 0,\n  moneyInvested : 0,\n  moneyInvestedWithFees : 0\n};\n\nconst emptyState = {\n  fileUploaded: false,\n  showLoader : false,\n  postProcessingDone : false,\n  postProcessingCheckpoints : 0,\n  fileData : [],\n  allCoinData : [],\n  allCoinCoinGeckoId : [],\n  allCoinPrice : [],\n  allSuportedCoins : [],\n  selectedCoinData : defaultCoinObject,\n  selectedCoinHistoricPrice : [],\n  selectedCoinDataSet : [],\n  selectedCoinPrice : -1,\n  selectedCoinToken : \"\"\n}\n\nclass App extends Component {\n  postProcessingCheckpointCounter = 0;\n  constructor(props) {\n    super(props);\n    this.state = emptyState\n\n    var cachedData = JSON.parse(localStorage.getItem(LOCAL_DATA));\n    if(cachedData != null && Array.isArray(cachedData)){\n      console.log(\"Data alrady cached\",cachedData)\n\n      this.initialProcessingChecks();\n      setTimeout( () => {\n        this.handleProcessedData(cachedData)\n      },200)\n      \n    }\n  }\n\n  initialProcessingChecks = () => {\n    this.postProcessingCheckpointCounter = 0;\n    var postProcessingCheckpoints = 999999;\n    this.setState({ postProcessingCheckpoints , postProcessingDone : false, showLoader : true});\n  }\n\n\n  handleProcessedData = (fileData) => {\n\n    localStorage.setItem(LOCAL_DATA,JSON.stringify(fileData))\n\n    this.setState({ fileUploaded: true, fileData});\n          \n    var coinDataAnalyzer = this.getCoinDataAnalyzer(0);\n    var allSuportedCoins = this.getAllCoinsFromReport(fileData)\n                    .filter( coinName => \n                      (this\n                        .getCoinDataFromReport(coinName)\n                        .reduce(coinDataAnalyzer,Object.assign({},defaultCoinObject))\n                        .coinsOwned > 0)\n                    )\n    \n    // REMOVE COINS NOT PRESENT IN WHITE LABEL\n    allSuportedCoins = allSuportedCoins.filter( coin =>{\n      return ( -1 !== whiteListCoins.indexOf(\"ALL\") || -1 !== whiteListCoins.indexOf(coin) )\n    })\n\n    // REMOVE COINS PRESENT IN BLACK LABEL\n    allSuportedCoins = allSuportedCoins.filter( coin =>{\n      return ( -1 !== blackListCoins.indexOf(\"ALL\") || -1 === blackListCoins.indexOf(coin) )\n    })\n\n    this.setState( { allSuportedCoins })\n    this.updateLatestCoinPricesFromCoinGecko();\n  }\n\n  handleFiles = files => {\n\n    this.initialProcessingChecks()\n\n    var reader = new FileReader();\n    reader.onload = (e) => {\n        // Use reader.result\n        CSVPasrse(reader.result, {columns: true, trim: true}, (err,fileData) => {\n          this.handleProcessedData(fileData);\n        }) \n    }\n    reader.readAsText(files[0]);\n  }\n\n  getCoinDataFromReport = (selectedCoinToken) => {\n    return this.state.fileData.filter( row => (row.Coin.toLowerCase() === selectedCoinToken.toLowerCase()));\n  }\n\n  getAllCoinsFromReport = (report) => {\n    return [...new Set(report.map((row) => row.Coin))] \n  }\n\n  getCoinDataAnalyzer = (coinPrice) => {\n      return (prevTransaction,currentTransaction) => {\n        var newRecord = Object.assign({},prevTransaction);\n        \n        if(currentTransaction.SIDE==='BUY'){\n          newRecord.coinsOwned += parseFloat(currentTransaction.Crypto_Amt)\n          newRecord.moneyInvested -= ((parseFloat(currentTransaction.Crypto_Amt)) * (parseFloat(currentTransaction.Rate)))\n          newRecord.moneyInvestedWithFees -= parseFloat(currentTransaction.FIAT)\n        }else{\n          newRecord.coinsOwned -= parseFloat(currentTransaction.Crypto_Amt)\n          newRecord.moneyInvested += ((parseFloat(currentTransaction.Crypto_Amt)) * (parseFloat(currentTransaction.Rate)))\n          newRecord.moneyInvestedWithFees += parseFloat(currentTransaction.FIAT)\n        }\n        \n        newRecord.fee += parseFloat(currentTransaction.Fee)\n        newRecord.currentValue = (newRecord.coinsOwned * coinPrice)\n\n        if(newRecord.currentValue !== 0)\n          newRecord.currentValue -= newRecord.fee\n    \n        return newRecord  \n      }\n  }\n  \n  postProcessingCheckpoints = 0;\n  \n  // var coinSymbol = coinResp.symbol.toLowerCase();\n\n  // Updates coin price at indes in state\n  fetchCoinDataUsingId = (cb) => {\n    var index = this.postProcessingCheckpointCounter\n\n    if(this.state.allCoinCoinGeckoId[index] === undefined){\n      cb();\n      return;\n    }\n\n    CoinGeckoClient\n      .coins\n      .fetch(this.state.allCoinCoinGeckoId[index], {})\n      .then(coinDataReponse => {\n          const coinPrice = coinDataReponse.data.market_data.current_price.inr\n          var allCoinPrice = this.state.allCoinPrice;\n          allCoinPrice[index] = coinPrice\n          this.setState({ allCoinPrice })     \n\n          var coinDataSet = this.getCoinDataFromReport(this.state.allSuportedCoins[index]);\n          var defaultResp = Object.assign({},defaultCoinObject);\n          var coinData = coinDataSet.reduce(this.getCoinDataAnalyzer(coinPrice),defaultResp);\n          \n          var allCoinData = this.state.allCoinData;\n          allCoinData[index] = coinData\n          this.setState({ allCoinData })\n\n\n          cb();\n      }).catch(err => {\n        console.log(err)\n        cb();\n      });\n  }\n\n  updateLatestCoinPricesFromCoinGecko = () => {\n    CoinGeckoClient\n        .coins\n        .list()\n        .then(resp => {\n            if(resp.code !== 200){\n                return;\n            }\n            var suportedResponse = resp.data.filter( coinResp => {\n              return (-1 !== this.state.allSuportedCoins.indexOf(coinResp.symbol.toUpperCase()))\n            });\n            // Set Checkpoint Size\n            this.postProcessingCheckpointCounter = 0;\n            var postProcessingCheckpoints = suportedResponse.length;\n            this.setState({ postProcessingCheckpoints });\n            \n            var allCoinCoinGeckoId = this.state.allCoinCoinGeckoId;\n            suportedResponse.forEach( coinResp => {\n                var coinSymbol = coinResp.symbol.toLowerCase();\n                var indexInSuportedCoins = this.state.allSuportedCoins.indexOf(coinSymbol.toUpperCase())\n                allCoinCoinGeckoId[indexInSuportedCoins] = coinResp.id\n            })\n            this.setState({ allCoinCoinGeckoId });\n            var toRepeat = () => {\n              if(postProcessingCheckpoints <= this.postProcessingCheckpointCounter\n                  && !this.state.postProcessingDone){\n                this.setState({ postProcessingDone : true, showLoader : false})\n                return;\n              }\n              this.fetchCoinDataUsingId(() => { \n                this.postProcessingCheckpointCounter++;\n                toRepeat();\n              })\n            }\n            toRepeat();\n\n\n    }).catch(console.log);\n  }\n\n  fetchSelectedCoinIdFromCoinGecko = () => {\n    CoinGeckoClient\n        .coins\n        .list()\n        .then(resp => {\n            if(resp.code !== 200){\n                return;\n            }\n            resp.data.forEach( coinResp => {\n                var coinSymbol = coinResp.symbol.toLowerCase();\n                if(coinSymbol === this.state.selectedCoinToken.toLowerCase()){\n                    \n                    // Get Data\n                    this.fetchCoinPrice(coinResp.id)\n                    this.fetchHistoricPrices(coinResp.id)\n            }\n        })\n    }).catch(console.log);\n  }\n\n  fetchCoinPrice = (coinId) => {\n    CoinGeckoClient\n      .coins\n      .fetch(coinId, {})\n      .then(coinDataReponse => {\n          // const selectedCoinPrice = 1\n          const selectedCoinPrice = coinDataReponse.data.market_data.current_price.inr\n          this.updateSelectedCoinInState(selectedCoinPrice);\n      }).catch(console.log);\n  }\n\n  fetchHistoricPrices = (coinId) => {\n    CoinGeckoClient\n      .coins\n      .fetchMarketChart(coinId, {days : 91, vs_currency : 'inr' , interval : 'daily '})\n      .then(coinMarketChartData => {\n          const selectedCoinHistoricPrice = coinMarketChartData\n                                              .data\n                                              .prices\n        this.setState( { selectedCoinHistoricPrice });\n      }).catch(console.log);\n  }\n\n  // UI EVENTS\n\n  resetAll = () => {\n    localStorage.setItem(LOCAL_DATA,null);\n    this.setState(emptyState)\n  }\n\n  updateSelectedCoinInState = (selectedCoinPrice) => {\n    var selectedCoinName = this.state.selectedCoinToken;\n    var selectedCoinDataSet = this.getCoinDataFromReport(selectedCoinName);\n    var defaultResp = Object.assign({},defaultCoinObject);\n    var selectedCoinData = selectedCoinDataSet.reduce(this.getCoinDataAnalyzer(selectedCoinPrice),defaultResp);\n    \n    this.setState({selectedCoinPrice , selectedCoinDataSet , selectedCoinData })\n\n  }\n\n  handleNewTokenSelection = (selectedCoinToken) => {\n    this.setState( { selectedCoinToken })\n    this.fetchSelectedCoinIdFromCoinGecko();\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n           <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton\n                size=\"large\"\n                edge=\"start\"\n                color=\"inherit\"\n                aria-label=\"menu\"\n                sx={{ mr: 2 }}\n              >\n                {/* <MenuIcon /> */}\n              </IconButton>\n              <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                { this.state.postProcessingDone ? \"Detail\" : \"Upload your file\"}\n              </Typography>\n                { this.state.postProcessingDone ? \n                    <Button onClick={this.resetAll} color=\"inherit\">Reset</Button>\n                    : <ReactFileReader handleFiles={this.handleFiles} fileTypes={'.csv'}>\n                          <Button color=\"inherit\" >Upload</Button>\n                      </ReactFileReader>\n                }\n\n              \n            </Toolbar>\n          </AppBar>\n          {\n            !this.state.postProcessingDone\n              ? <header className=\"App-header\"> \n                  {/* <img src={logo} height=\"100px\" width=\"100px\" className=\"App-logo\" alt=\"logo\" /> */}\n                  <label>In Deapth Analysis of Trade Report</label>\n                </header> \n              : \n              <div>\n                <PortfolioOverview\n                  allCoinData = {this.state.allCoinData}\n                  allCoins = {this.state.allSuportedCoins}\n                />\n                <PortfolioDetails\n                  selectedCoinToken = { this.state.selectedCoinToken }\n                  selectedCoinPrice = { this.state.selectedCoinPrice}\n                  selectedCoinData = { this.state.selectedCoinData}\n                  selectedCoinDataSet = { this.state.selectedCoinDataSet}\n                  selectedCoinHistoricPrice = { this.state.selectedCoinHistoricPrice }\n                  updateSelectedToken = {this.handleNewTokenSelection}\n                  allSuportedCoins = {this.state.allSuportedCoins} />\n              </div>\n              \n          }\n          <Backdrop\n            sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n            open={this.state.showLoader}\n          >\n            <CircularProgress color=\"inherit\" />\n          </Backdrop>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Start listening to the process\nvar warningCheck =  (warning) => {\n  \n  // If there is a warning then print\n  // it and stop the process\n  if (warning) {\n      console.log(warning);\n  }\n};\n\nprocess.emitWarning = warningCheck;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}